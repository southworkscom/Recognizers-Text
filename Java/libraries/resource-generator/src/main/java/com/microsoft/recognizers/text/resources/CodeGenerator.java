package com.microsoft.recognizers.text.resources;

import com.microsoft.recognizers.text.resources.datatypes.*;
import com.microsoft.recognizers.text.resources.writters.*;
import org.yaml.snakeyaml.TypeDescription;
import org.yaml.snakeyaml.Yaml;

import java.io.*;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Map;

public class CodeGenerator {

    private static final String headerComment = String.join(
            System.lineSeparator(),
            "// ------------------------------------------------------------------------------",
            "// <auto-generated>",
            "//     This code was generated by a tool.",
            "//     Changes to this file may cause incorrect behavior and will be lost if",
            "//     the code is regenerated.",
            "// </auto-generated>",
            "// ------------------------------------------------------------------------------");

    public static void Generate(Path yamlFilePath, Path outputFilePath, String header, String footer) throws IOException {

        // Read and Parse YAML
        Yaml yaml = new Yaml();
        yaml.addTypeDescription(new TypeDescription(ParamsRegex.class, "!paramsRegex"));
        yaml.addTypeDescription(new TypeDescription(SimpleRegex.class, "!simpleRegex"));
        yaml.addTypeDescription(new TypeDescription(NestedRegex.class, "!nestedRegex"));
        yaml.addTypeDescription(new TypeDescription(String.class, "!char"));
        yaml.addTypeDescription(new TypeDescription(Dictionary.class, "!dictionary"));
        yaml.addTypeDescription(new TypeDescription(List.class, "!list"));
        Map<String, Object> raw = yaml.load(new FileReader(yamlFilePath.toString()));

        // Transform
        String[] lines = GenerateCodeLines(raw);

        // Write to file
        BufferedWriter writer = null;
        try {
            File outputFile = outputFilePath.toFile();
            writer = new BufferedWriter(new FileWriter(outputFile));
            writer.write(headerComment);
            writer.newLine();
            writer.newLine();
            writer.write(header);
            writer.newLine();

            BufferedWriter finalWriter = writer;
            for (String l : lines) {
                finalWriter.newLine();
                finalWriter.write(l);
                finalWriter.newLine();
            }

            writer.write(footer);
            writer.newLine();
        } catch (Exception e) {
            throw e;
        } finally {
            try {
                writer.close();
            } catch (Exception e) {
                throw e;
            }
        }
    }

    private static String[] GenerateCodeLines(Map<String, Object> raw) {
        return raw.entrySet().stream().map(kv -> {
            String tokenName = kv.getKey();
            Object token = kv.getValue();
            return getWriter(tokenName, token).write();
        }).toArray(size -> new String[size]);
    }

    private static ICodeWriter getWriter(String tokenName, Object token) throws IllegalArgumentException {
        if (token instanceof ParamsRegex) {
            return new ParamsRegexWriter(tokenName, (ParamsRegex) token);
        }

        if (token instanceof SimpleRegex) {
            return new SimpleRegexWriter(tokenName, (SimpleRegex) token);
        }

        if (token instanceof NestedRegex) {
            return new NestedRegexWriter(tokenName, (NestedRegex) token);
        }

        if (token instanceof String) {
            return new DefaultWriter(tokenName, (String) token);
        }

        if (token instanceof ArrayList) {
            return new ListWriter(tokenName, (String[]) ((ArrayList) token).stream().map(o -> o.toString()).toArray(size -> new String[size]));
        }

        if (token instanceof List) {
            return new ListWriter(tokenName, ((List) token).entries);
        }

        if (token instanceof Dictionary) {
            return new DictionaryWriter(tokenName, (Dictionary) token);
        }

        throw new IllegalArgumentException(String.format("Data Type not supported for %s: %s", tokenName, token));
    }
}
