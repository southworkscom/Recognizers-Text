# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------

from .base_date_time import BaseDateTime
# pylint: disable=line-too-long
class PortugueseDateTime:
    TillRegex = f'(?<till>ate|as|às|até|ateh|a|ao|--|-|—|——)(\\s+(o|[aà](s)?))?'
    AndRegex = f'(?<and>e|e\\s*o|--|-|—|——)'
    DayRegex = f'(?<day>01|02|03|04|05|06|07|08|09|1|10|11|12|13|14|15|16|17|18|19|2|20|21|22|23|24|25|26|27|28|29|3|30|31|4|5|6|7|8|9)(?=\\b|t)'
    MonthNumRegex = f'(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b'
    AmDescRegex = f'({BaseDateTime.BaseAmDescRegex})'
    PmDescRegex = f'({BaseDateTime.BasePmDescRegex})'
    AmPmDescRegex = f'({BaseDateTime.BaseAmPmDescRegex})'
    DescRegex = f'(?<desc>({AmDescRegex}|{PmDescRegex}))'
    RangePrefixRegex = f'((desde|de|da|das|entre)\\s+(a(s)?\\s+)?)'
    TwoDigitYearRegex = f'\\b(?<![$])(?<year>([0-27-9]\\d))(?!(\\s*((\\:)|{AmDescRegex}|{PmDescRegex}|\\.\\d)))\\b'
    FullTextYearRegex = f'^[\\*]'
    YearRegex = f'({BaseDateTime.FourDigitYearRegex}|{FullTextYearRegex})'
    RelativeMonthRegex = f'(?<relmonth>([nd]?es[st]e|pr[óo]ximo|passsado|[uú]ltimo)\\s+m[eê]s)\\b'
    MonthRegex = f'(?<month>abril|abr|agosto|ago|dezembro|dez|fevereiro|fev|janeiro|jan|julho|jul|junho|jun|mar[çc]o|mar|maio|mai|novembro|nov|outubro|out|septembro|setembro|sept|set)'
    MonthSuffixRegex = f'(?<msuf>((em|no)\\s+|d[eo]\\s+)?({RelativeMonthRegex}|{MonthRegex}))'
    DateUnitRegex = f'(?<unit>anos|ano|meses|m[êe]s|semanas|semana|dia(s)?)\\b'
    PastRegex = f'(?<past>\\b(passad(a|o)(s)?|[uú]ltim[oa](s)?|anterior(es)?|h[aá]|pr[ée]vi[oa](s)?)\\b)'
    FutureRegex = f'(?<past>\\b(seguinte(s)?|pr[oó]xim[oa](s)?|dentro\\s+de|em|daqui\\s+a)\\b)'
    SimpleCasesRegex = f'\\b((desde\\s+[oa]|desde|d[oa])\\s+)?(dia\\s+)?({DayRegex})\\s*{TillRegex}\\s*(o dia\\s+)?({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){YearRegex})?\\b'
    MonthFrontSimpleCasesRegex = f'\\b{MonthSuffixRegex}\\s+((desde\\s+[oa]|desde|d[oa])\\s+)?(dia\\s+)?({DayRegex})\\s*{TillRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){YearRegex})?\\b'
    MonthFrontBetweenRegex = f'\\b{MonthSuffixRegex}\\s+((entre|entre\\s+[oa]s?)\\s+)(dias?\\s+)?({DayRegex})\\s*{AndRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){YearRegex})?\\b'
    DayBetweenRegex = f'\\b((entre|entre\\s+[oa]s?)\\s+)(dia\\s+)?({DayRegex})\\s*{AndRegex}\\s*({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){YearRegex})?\\b'
    OneWordPeriodRegex = f'\\b(((pr[oó]xim[oa]?|[nd]?es[st]e|aquel[ea]|[uú]ltim[oa]?|em)\\s+)?(?<month>abril|abr|agosto|ago|dezembro|dez|fevereiro|fev|janeiro|jan|julho|jul|junho|jun|mar[çc]o|mar|maio|mai|novembro|nov|outubro|out|septembro|setembro|sept|set)|(?<=\\b(de|do|da|o|a)\\s+)?(pr[oó]xim[oa](s)?|[uú]ltim[oa]s?|est(e|a))\\s+(fim de semana|fins de semana|semana|m[êe]s|ano)|fim de semana|fins de semana|(m[êe]s|anos)? [àa] data)\\b'
    MonthWithYearRegex = f'\\b(((pr[oó]xim[oa](s)?|[nd]?es[st]e|aquele|[uú]ltim[oa]?|em)\\s+)?(?<month><month>abril|abr|agosto|ago|dezembro|dez|fevereiro|fev|janeiro|jan|julho|jul|junho|jun|mar[çc]o|mar|maio|mai|novembro|nov|outubro|out|septembro|setembro|sept|set)\\s+((de|do|da|o|a)\\s+)?({YearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\\s+ano))\\b'
    MonthNumWithYearRegex = f'({YearRegex}(\\s*?)[/\\-\\.](\\s*?){MonthNumRegex})|({MonthNumRegex}(\\s*?)[/\\-](\\s*?){YearRegex})'
    WeekOfMonthRegex = f'(?<wom>(a|na\\s+)?(?<cardinal>primeira?|1a|segunda|2a|terceira|3a|[qc]uarta|4a|quinta|5a|[uú]ltima)\\s+semana\\s+{MonthSuffixRegex})'
    WeekOfYearRegex = f'(?<woy>(a|na\\s+)?(?<cardinal>primeira?|1a|segunda|2a|terceira|3a|[qc]uarta|4a|quinta|5a|[uú]ltima?)\\s+semana(\\s+d[oe]?)?\\s+({YearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|[nd]?es[st]e)\\s+ano))'
    FollowedDateUnit = f'^\\s*{DateUnitRegex}'
    NumberCombinedWithDateUnit = f'\\b(?<num>\\d+(\\.\\d*)?){DateUnitRegex}'
    QuarterRegex = f'(n?o\\s+)?(?<cardinal>primeiro|1[oº]|segundo|2[oº]|terceiro|3[oº]|[qc]uarto|4[oº])\\s+trimestre(\\s+d[oe]|\\s*,\\s*)?\\s+({YearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\\s+ano)'
    QuarterRegexYearFront = f'({YearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|[nd]?es[st]e)\\s+ano)\\s+(n?o\\s+)?(?<cardinal>(primeiro)|1[oº]|segundo|2[oº]|terceiro|3[oº]|[qc]uarto|4[oº])\\s+trimestre'
    AllHalfYearRegex = f'^[.]'
    PrefixDayRegex = f'^[.]'
    SeasonRegex = f'\\b(?<season>(([uú]ltim[oa]|[nd]?es[st][ea]|n?[oa]|(pr[oó]xim[oa]s?|seguinte))\\s+)?(?<seas>primavera|ver[ãa]o|outono|inverno)((\\s+)?(seguinte|((de\\s+|,)?\\s*{YearRegex})|((do\\s+)?(?<order>pr[oó]ximo|[uú]ltimo|[nd]?es[st]e)\\s+ano)))?)\\b'
    WhichWeekRegex = f'(semana)(\\s*)(?<number>\\d\\d|\\d|0\\d)'
    WeekOfRegex = f'(semana)(\\s*)((do|da|de))'
    MonthOfRegex = f'(mes)(\\s*)((do|da|de))'
    RangeUnitRegex = f'\\b(?<unit>anos|ano|meses|m[êe]s|semanas|semana)\\b'
    InConnectorRegex = f'\\b(em)\\b'
    WithinNextPrefixRegex = f'^[.]'
    CenturySuffixRegex = f'^[.]'
    RelativeRegex = f'^[.]'
    FromRegex = f'((desde|de)(\\s*a(s)?)?)$'
    ConnectorAndRegex = f'(e\\s*([àa](s)?)?)$'
    BetweenRegex = f'(entre\\s*([oa](s)?)?)'
    WeekDayRegex = f'\\b(?<weekday>domingos?|segundas?-feiras?|segundas?\\s+feiras?|segundas?|2a|ter[çca]s?-feiras?|ter[çc]as?\\s+feiras?|ter[cça]s?|3a|quartas?-feiras?|quartas?\\s+feiras?|quartas?|4a|quintas?-feiras?|quintas?\\s+feiras?|quintas?|5a|sextas?-feiras?|sextas?\\s+feiras?|sextas?|6a|s[aá]bados?|2ª|3ª|4ª|5ª|6ª|dom|seg|ter|qua|qui|sex|sab|seg\\.|ter[cç]\\.|qua\\.|qui\\.|sex\\.|s[aá]b\\.|dom\\.)\\b'
    OnRegex = f'(?<=\\b(em|no)\\s+)({DayRegex}s?)\\b'
    RelaxedOnRegex = f'(?<=\\b(em|n[oa]|d[oa])\\s+)(dia\\s+)?((?<day>10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\b'
    ThisRegex = f'\\b(([nd]?es[st][ea]\\s*){WeekDayRegex})|({WeekDayRegex}\\s*([nd]?es[st]a\\s+semana))\\b'
    LastDateRegex = f'\\b(([uú]ltim[ao])\\s*{WeekDayRegex})|({WeekDayRegex}(\\s+(([nd]?es[st]a|na|da)\\s+([uú]ltima\\s+)?semana)))\\b'
    NextDateRegex = f'\\b(((pr[oó]xim[oa]|seguinte)\\s*){WeekDayRegex})|({WeekDayRegex}((\\s+(pr[oó]xim[oa]|seguinte))|(\\s+(da\\s+)?(semana\\s+seguinte|pr[oó]xima\\s+semana))))\\b'
    SpecialDayRegex = f'\\b((d?o\\s+)?(dia\\s+antes\\s+de\\s+ontem|antes\\s+de\\s+ontem|anteontem)|((d?o\\s+)?(dia\\s+|depois\\s+|dia\\s+depois\\s+)?de\\s+amanh[aã])|(o\\s)?dia\\s+seguinte|(o\\s)?pr[oó]ximo\\s+dia|(o\\s+)?[uú]ltimo\\s+dia|ontem|amanh[ãa]|hoje)|(do\\s+dia$)\\b'
    SpecialDayWithNumRegex = f'^[.]'
    ForTheRegex = f'.^'
    WeekDayAndDayOfMonthRegex = f'.^'
    WeekDayOfMonthRegex = f'(?<wom>(n?[ao]\\s+)?(?<cardinal>primeir[ao]|1[ao]|segund[ao]|2[ao]|terceir[ao]|3[ao]|[qc]uart[ao]|4[ao]|quint[ao]|5[ao]|[uú]ltim[ao])\\s+{WeekDayRegex}\\s+{MonthSuffixRegex})'
    RelativeWeekDayRegex = f'^[.]'
    NumberEndingPattern = f'^[.]'
    SpecialDateRegex = f'(?<=\\bno\\s+){DayRegex}\\b'
    OfMonthRegex = f'^\\s*de\\s*{MonthSuffixRegex}'
    MonthEndRegex = f'({MonthRegex}\\s*(o)?\\s*$)'
    WeekDayEnd = f'{WeekDayRegex}\\s*,?\\s*$'
    DateYearRegex = f'(?<year>{YearRegex}|{TwoDigitYearRegex})'
    DateExtractor1 = f'\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}?((\\s*(de)|[/\\\\\\.\\-])\\s*)?{MonthRegex}\\b'
    DateExtractor2 = f'\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}\\s*([\\.\\-]|de)?\\s*{MonthRegex}?(\\s*(,|de)\\s*){YearRegex}\\b'
    DateExtractor3 = f'\\b({WeekDayRegex}(\\s+|\\s*,\\s*))?{DayRegex}(\\s+|\\s*,\\s*|\\s+de\\s+|\\s*-\\s*){MonthRegex}((\\s+|\\s*(,|de)\\s*){YearRegex})?\\b'
    DateExtractor4 = f'\\b{MonthNumRegex}\\s*[/\\\\\\-]\\s*{DayRegex}\\s*[/\\\\\\-]\\s*{DateYearRegex}'
    DateExtractor5 = f'\\b{DayRegex}\\s*[/\\\\\\-\\.]\\s*({MonthNumRegex}|{MonthRegex})\\s*[/\\\\\\-\\.]\\s*{DateYearRegex}'
    DateExtractor6 = f'(?<=\\b(em|no|o)\\s+){MonthNumRegex}[\\-\\.]{DayRegex}\\b'
    DateExtractor7 = f'\\b{MonthNumRegex}\\s*/\\s*{DayRegex}((\\s+|\\s*(,|de)\\s*){DateYearRegex})?\\b'
    DateExtractor8 = f'(?<=\\b(em|no|o)\\s+){DayRegex}[\\\\\\-]{MonthNumRegex}\\b'
    DateExtractor9 = f'\\b{DayRegex}\\s*/\\s*{MonthNumRegex}((\\s+|\\s*(,|de)\\s*){DateYearRegex})?\\b'
    DateExtractor10 = f'\\b{YearRegex}\\s*[/\\\\\\-\\.]\\s*{MonthNumRegex}\\s*[/\\\\\\-\\.]\\s*{DayRegex}'
    DateExtractor11 = f'(?<=\\b(dia)\\s+){DayRegex}'
    HourNumRegex = f'\\b(?<hournum>zero|uma|duas|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze)\\b'
    MinuteNumRegex = f'(?<minnum>um|dois|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)'
    DeltaMinuteNumRegex = f'(?<deltaminnum>um|dois|tr[êe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)'
    OclockRegex = f'(?<oclock>em\\s+ponto)'
    PmRegex = f'(?<pm>((pela|de|da|\\b[àa]\\b|na)\\s+(tarde|noite)))|((depois\\s+do|ap[óo]s\\s+o)\\s+(almo[çc]o|meio dia|meio-dia))'
    AmRegex = f'(?<am>(pela|de|da|na)\\s+(manh[ãa]|madrugada))'
    AmTimeRegex = f'(?<am>([dn]?es[st]a|(pela|de|da|na))\\s+(manh[ãa]|madrugada))'
    PmTimeRegex = f'(?<pm>(([dn]?es[st]a|\\b[àa]\\b|(pela|de|da|na))\\s+(tarde|noite)))|((depois\\s+do|ap[óo]s\\s+o)\\s+(almo[çc]o|meio dia|meio-dia))'
    LessThanOneHour = f'(?<lth>((\\s+e\\s+)?(quinze|(um\\s+|dois\\s+|tr[êes]\\s+)?quartos?)|quinze|(\\s*)(um\\s+|dois\\s+|tr[êes]\\s+)?quartos?|(\\s+e\\s+)(meia|trinta)|{BaseDateTime.DeltaMinuteRegex}(\\s+(minuto|minutos|min|mins))|{DeltaMinuteNumRegex}(\\s+(minuto|minutos|min|mins))))'
    TensTimeRegex = f'(?<tens>dez|vinte|trinta|[qc]uarenta|cin[qc]uenta)'
    WrittenTimeRegex = f'(?<writtentime>({HourNumRegex}\\s*((e|menos)\\s+)?({MinuteNumRegex}|({TensTimeRegex}((\\s*e\\s+)?{MinuteNumRegex})?)))|(({MinuteNumRegex}|({TensTimeRegex}((\\s*e\\s+)?{MinuteNumRegex})?))\\s*((para as|pras|antes da|antes das)\\s+)?({HourNumRegex}|{BaseDateTime.HourRegex})))'
    TimePrefix = f'(?<prefix>{LessThanOneHour}(\\s+(passad[ao]s)\\s+(as)?|\\s+depois\\s+(das?|do)|\\s+pras?|\\s+(para|antes)?\\s+([àa]s?))?)'
    TimeSuffix = f'(?<suffix>({LessThanOneHour}\\s+)?({AmRegex}|{PmRegex}|{OclockRegex}))'
    BasicTime = f'(?<basictime>{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}:{BaseDateTime.MinuteRegex}(:{BaseDateTime.SecondRegex})?|{BaseDateTime.HourRegex})'
    AtRegex = f'\\b(?<=\\b([aà]s?)\\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\\b'
    ConnectNumRegex = f'({BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\s*{DescRegex})'
    TimeRegex1 = f'(\\b{TimePrefix}\\s+)?({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})\\s*({DescRegex})'
    TimeRegex2 = f'(\\b{TimePrefix}\\s+)?(t)?{BaseDateTime.HourRegex}(\\s*)?:(\\s*)?{BaseDateTime.MinuteRegex}((\\s*)?:(\\s*)?{BaseDateTime.SecondRegex})?((\\s*{DescRegex})|\\b)'
    TimeRegex3 = f'(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}\\.{BaseDateTime.MinuteRegex}(\\s*{DescRegex})'
    TimeRegex4 = f'\\b(({DescRegex}?)|({BasicTime}?)({DescRegex}?))({TimePrefix}\\s*)({HourNumRegex}|{BaseDateTime.HourRegex})?(\\s+{TensTimeRegex}(\\s+e\\s+)?{MinuteNumRegex}?)?({OclockRegex})?\\b'
    TimeRegex5 = f'\\b({TimePrefix}|{BasicTime}{TimePrefix})\\s+(\\s*{DescRegex})?{BasicTime}?\\s*{TimeSuffix}\\b'
    TimeRegex6 = f'({BasicTime}(\\s*{DescRegex})?\\s+{TimeSuffix}\\b)'
    TimeRegex7 = f'\\b{TimeSuffix}\\s+[àa]s?\\s+{BasicTime}((\\s*{DescRegex})|\\b)'
    TimeRegex8 = f'\\b{TimeSuffix}\\s+{BasicTime}((\\s*{DescRegex})|\\b)'
    TimeRegex9 = f'\\b(?<writtentime>{HourNumRegex}\\s+({TensTimeRegex}\\s*)?(e\\s+)?{MinuteNumRegex}?)\\b'
    TimeRegex10 = f'(\\b([àa]|ao?)|na|de|da|pela)\\s+(madrugada|manh[ãa]|meio\\s*dia|meia\\s*noite|tarde|noite)'
    TimeRegex11 = f'\\b({WrittenTimeRegex})({DescRegex}?)\\b'
    TimeRegex12 = f'(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}(\\s*h\\s*){BaseDateTime.MinuteRegex}(\\s*{DescRegex})?'
    PrepositionRegex = f'(?<prep>([àa]s?|em|por|pelo|pela|no|na|de|d[oa]?)?$)'
    NowRegex = f'\\b(?<now>((logo|exatamente)\\s+)?agora(\\s+mesmo)?|neste\\s+momento|(assim\\s+que|t[ãa]o\\s+cedo\\s+quanto)\\s+(poss[ií]vel|possas?|possamos)|o\\s+mais\\s+(cedo|r[aá]pido)\\s+poss[íi]vel|recentemente|previamente)\\b'
    SuffixRegex = f'^\\s*((e|a|em|por|pelo|pela|no|na|de)\\s+)?(manh[ãa]|madrugada|meio\\s*dia|tarde|noite)\\b'
    TimeOfDayRegex = f'\\b(?<timeOfDay>manh[ãa]|madrugada|tarde|noite|((depois\\s+do|ap[óo]s\\s+o)\\s+(almo[çc]o|meio dia|meio-dia)))\\b'
    SpecificTimeOfDayRegex = f'\\b(((((a)?\\s+|[nd]?es[st]a|seguinte|pr[oó]xim[oa]|[uú]ltim[oa])\\s+)?{TimeOfDayRegex}))\\b'
    TimeOfTodayAfterRegex = f'^\\s*(,\\s*)?([àa]|em|por|pelo|pela|de|no|na?\\s+)?{SpecificTimeOfDayRegex}'
    TimeOfTodayBeforeRegex = f'({SpecificTimeOfDayRegex}(\\s*,)?(\\s+(a\\s+la(s)?|para))?\\s*)'
    SimpleTimeOfTodayAfterRegex = f'({HourNumRegex}|{BaseDateTime.HourRegex})\\s*(,\\s*)?((en|de(l)?)?\\s+)?{SpecificTimeOfDayRegex}'
    SimpleTimeOfTodayBeforeRegex = f'({SpecificTimeOfDayRegex}(\\s*,)?(\\s+(a\\s+la|para))?\\s*({HourNumRegex}|{BaseDateTime.HourRegex}))'
    SpecificEndOfRegex = f'((no|ao)\\s+)?(fi(m|nal)|t[ée]rmin(o|ar))(\\s+d?o(\\s+dia)?(\\s+de)?)?\\s*$'
    UnspecificEndOfRegex = f'^[.]'
    UnspecificEndOfRangeRegex = f'^[.]'
    UnitRegex = f'(?<unit>anos|ano|meses|m[êe]s|semanas|semana|dias|dia|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\b'
    ConnectorRegex = f'^(,|t|para [ao]|para as|pras|cerca de|cerca das|perto de|perto das|quase)$'
    TimeHourNumRegex = f'(?<hour>vinte e um|vinte e dois|vinte e tr[êe]s|vinte e quatro|zero|um|uma|dois|duas|tr[êe]s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|quatorze|catorze|quinze|dez[ea]sseis|dez[ea]ssete|dezoito|dez[ea]nove|vinte)'
    PureNumFromTo = f'((desde|de|da|das)\\s+(a(s)?\\s+)?)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*{TillRegex}\\s*({BaseDateTime.HourRegex}|{TimeHourNumRegex})\\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?'
    PureNumBetweenAnd = f'(entre\\s+((a|as)?\\s+)?)({BaseDateTime.HourRegex}|{TimeHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*e\\s*(a(s)?\\s+)?({BaseDateTime.HourRegex}|{TimeHourNumRegex})\\s*(?<rightDesc>{PmRegex}|{AmRegex}|{DescRegex})?'
    SpecificTimeFromTo = f'^[.]'
    SpecificTimeBetweenAnd = f'^[.]'
    TimeUnitRegex = f'(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\b'
    TimeFollowedUnit = f'^\\s*{TimeUnitRegex}'
    TimeNumberCombinedWithUnit = f'\\b(?<num>\\d+(\\,\\d*)?)\\s*{TimeUnitRegex}'
    DateTimePeriodNumberCombinedWithUnit = f'\\b(?<num>\\d+(\\.\\d*)?)\\s*{TimeUnitRegex}'
    PeriodTimeOfDayWithDateRegex = f'\\b((e|[àa]|em|na|no|ao|pel[ao]|de)\\s+)?(?<timeOfDay>manh[ãa]|madrugada|(passado\\s+(o\\s+)?)?meio\\s+dia|tarde|noite)\\b'
    RelativeTimeUnitRegex = f'({PastRegex}|{FutureRegex})\\s+{UnitRegex}|{UnitRegex}\\s+({PastRegex}|{FutureRegex})'
    SuffixAndRegex = f'(?<suffix>\\s*(e)\\s+(?<suffix_num>meia|(um\\s+)?quarto))'
    FollowedUnit = f'^\\s*{UnitRegex}'
    LessThanRegex = f'^[.]'
    MoreThanRegex = f'^[.]'
    DurationNumberCombinedWithUnit = f'\\b(?<num>\\d+(\\,\\d*)?){UnitRegex}'
    AnUnitRegex = f'\\b(um(a)?)\\s+{UnitRegex}'
    DuringRegex = f'^[.]'
    AllRegex = f'\\b(?<all>tod[oa]?\\s+(o|a)\\s+(?<unit>ano|m[êe]s|semana|dia))\\b'
    HalfRegex = f'\\b(?<half>mei[oa]\\s+(?<unit>ano|m[êe]s|semana|dia|hora))\\b'
    ConjunctionRegex = f'^[.]'
    InexactNumberRegex = f'\\b(poucos|pouco|algum|alguns|v[áa]rios)\\b'
    InexactNumberUnitRegex = f'\\b(poucos|pouco|algum|alguns|v[áa]rios)\\s+{UnitRegex}'
    HolidayRegex1 = f'\\b(?<holiday>sexta-feira santa|sexta-feira da paix[ãa]o|quarta-feira de cinzas|carnaval|dia (de|de los) presidentes?|ano novo chin[eê]s|ano novo|v[ée]spera de ano novo|natal|v[ée]spera de natal|dia de a[cç][ãa]o de gra[çc]as|a[cç][ãa]o de gra[çc]as|yuandan|halloween|dia das bruxas|p[áa]scoa)(\\s+(d[eo]?\\s+)?({YearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\\s+ano))?\\b'
    HolidayRegex2 = f'\\b(?<holiday>(dia( d[eoa]s?)? )?(martin luther king|todos os santos|trabalho|s[ãa]o (patr[íi]cio|francisco|jorge|jo[ãa]o)|independ[êe]ncia|trabalhador|trabalho))(\\s+(d[eo]?\\s+)?({YearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\\s+ano))?\\b'
    HolidayRegex3 = f'\\b(?<holiday>(dia( d[eoa]s?)? )(trabalhador|trabalhadores|trabalho|m[ãa]es?|pais?|mulher(es)?|crian[çc]as?|marmota|professor|professores))(\\s+(d[eo]?\\s+)?({YearRegex}|(?<order>(pr[oó]xim[oa]?|[nd]?es[st][ea]|[uú]ltim[oa]?|em))\\s+ano))?\\b'
    BeforeRegex = f'(antes(\\s+(de|dos?|das?)?)?)'
    AfterRegex = f'((depois|ap[óo]s)(\\s*(de|d?os?|d?as?)?)?)'
    SinceRegex = f'(desde(\\s+(as?|o))?)'
    AroundRegex = f'^[.]'
    PeriodicRegex = f'\\b(?<periodic>di[áa]ri[ao]|diariamente|mensalmente|semanalmente|quinzenalmente|anualmente)\\b'
    EachExpression = f'cada|tod[oa]s?\\s*([oa]s)?'
    EachUnitRegex = f'(?<each>({EachExpression})\\s*{UnitRegex})'
    EachPrefixRegex = f'(?<each>({EachExpression})\\s*$)'
    EachDayRegex = f'\\s*({EachExpression})\\s*dias\\s*\\b'
    BeforeEachDayRegex = f'({EachExpression})\\s*dias(\\s+(as|ao))?\\s*\\b'
    SetEachRegex = f'(?<each>({EachExpression})\\s*)'
    LaterEarlyPeriodRegex = f'^[.]'
    WeekWithWeekDayRangeRegex = f'^[.]'
    GeneralEndingRegex = f'^[.]'
    MiddlePauseRegex = f'^[.]'
    PrefixArticleRegex = f'^[\\.]'
    OrRegex = f'^[.]'
    YearPlusNumberRegex = f'^[.]'
    NumberAsTimeRegex = f'^[.]'
    TimeBeforeAfterRegex = f'^[.]'
    DateNumberConnectorRegex = f'^[.]'
    ComplexDatePeriodRegex = f'^[.]'
    AgoRegex = f'\\b(antes|atr[áa]s|no passado)\\b'
    LaterRegex = f'\\b(depois d[eoa]s?|ap[óo]s (as)?|desde (as|o)|desde|no futuro|mais tarde)\\b'
    Tomorrow = 'amanh[ãa]'
    UnitMap = dict([(r'''anos''', r'''Y'''),
                    (r'''ano''', r'''Y'''),
                    (r'''meses''', r'''MON'''),
                    (r'''mes''', r'''MON'''),
                    (r'''mês''', r'''MON'''),
                    (r'''semanas''', r'''W'''),
                    (r'''semana''', r'''W'''),
                    (r'''dias''', r'''D'''),
                    (r'''dia''', r'''D'''),
                    (r'''horas''', r'''H'''),
                    (r'''hora''', r'''H'''),
                    (r'''hrs''', r'''H'''),
                    (r'''hr''', r'''H'''),
                    (r'''h''', r'''H'''),
                    (r'''minutos''', r'''M'''),
                    (r'''minuto''', r'''M'''),
                    (r'''mins''', r'''M'''),
                    (r'''min''', r'''M'''),
                    (r'''segundos''', r'''S'''),
                    (r'''segundo''', r'''S'''),
                    (r'''segs''', r'''S'''),
                    (r'''seg''', r'''S''')])
    UnitValueMap = dict([(r'''anos''', 31536000),
                         (r'''ano''', 31536000),
                         (r'''meses''', 2592000),
                         (r'''mes''', 2592000),
                         (r'''mês''', 2592000),
                         (r'''semanas''', 604800),
                         (r'''semana''', 604800),
                         (r'''dias''', 86400),
                         (r'''dia''', 86400),
                         (r'''horas''', 3600),
                         (r'''hora''', 3600),
                         (r'''hrs''', 3600),
                         (r'''hr''', 3600),
                         (r'''h''', 3600),
                         (r'''minutos''', 60),
                         (r'''minuto''', 60),
                         (r'''mins''', 60),
                         (r'''min''', 60),
                         (r'''segundos''', 1),
                         (r'''segundo''', 1),
                         (r'''segs''', 1),
                         (r'''seg''', 1)])
    SeasonMap = dict([(r'''primavera''', r'''SP'''),
                      (r'''verao''', r'''SU'''),
                      (r'''verão''', r'''SU'''),
                      (r'''outono''', r'''FA'''),
                      (r'''inverno''', r'''WI''')])
    SeasonValueMap = dict([(r'''SP''', 3),
                           (r'''SU''', 6),
                           (r'''FA''', 9),
                           (r'''WI''', 12)])
    CardinalMap = dict([(r'''primeiro''', 1),
                        (r'''primeira''', 1),
                        (r'''1o''', 1),
                        (r'''1a''', 1),
                        (r'''segundo''', 2),
                        (r'''segunda''', 2),
                        (r'''2o''', 2),
                        (r'''2a''', 2),
                        (r'''terceiro''', 3),
                        (r'''terceira''', 3),
                        (r'''3o''', 3),
                        (r'''3a''', 3),
                        (r'''cuarto''', 4),
                        (r'''quarto''', 4),
                        (r'''cuarta''', 4),
                        (r'''quarta''', 4),
                        (r'''4o''', 4),
                        (r'''4a''', 4),
                        (r'''quinto''', 5),
                        (r'''quinta''', 5),
                        (r'''5o''', 5),
                        (r'''5a''', 5)])
    DayOfWeek = dict([(r'''segunda-feira''', 1),
                      (r'''segundas-feiras''', 1),
                      (r'''segunda''', 1),
                      (r'''segundas''', 1),
                      (r'''terça-feira''', 2),
                      (r'''terças-feiras''', 2),
                      (r'''terça''', 2),
                      (r'''terças''', 2),
                      (r'''terca-feira''', 2),
                      (r'''tercas-feiras''', 2),
                      (r'''terca''', 2),
                      (r'''tercas''', 2),
                      (r'''quarta-feira''', 3),
                      (r'''quartas-feiras''', 3),
                      (r'''quarta''', 3),
                      (r'''quartas''', 3),
                      (r'''quinta-feira''', 4),
                      (r'''quintas-feiras''', 4),
                      (r'''quinta''', 4),
                      (r'''quintas''', 4),
                      (r'''sexta-feira''', 5),
                      (r'''sextas-feiras''', 5),
                      (r'''sexta''', 5),
                      (r'''sextas''', 5),
                      (r'''sabado''', 6),
                      (r'''sabados''', 6),
                      (r'''sábado''', 6),
                      (r'''sábados''', 6),
                      (r'''domingo''', 0),
                      (r'''domingos''', 0),
                      (r'''seg''', 1),
                      (r'''2a''', 1),
                      (r'''ter''', 2),
                      (r'''3a''', 2),
                      (r'''qua''', 3),
                      (r'''4a''', 3),
                      (r'''qui''', 4),
                      (r'''5a''', 4),
                      (r'''sex''', 5),
                      (r'''6a''', 5),
                      (r'''sab''', 6),
                      (r'''dom''', 0)])
    MonthOfYear = dict([(r'''janeiro''', 1),
                        (r'''fevereiro''', 2),
                        (r'''março''', 3),
                        (r'''marco''', 3),
                        (r'''abril''', 4),
                        (r'''maio''', 5),
                        (r'''junho''', 6),
                        (r'''julho''', 7),
                        (r'''agosto''', 8),
                        (r'''septembro''', 9),
                        (r'''setembro''', 9),
                        (r'''outubro''', 10),
                        (r'''novembro''', 11),
                        (r'''dezembro''', 12),
                        (r'''jan''', 1),
                        (r'''fev''', 2),
                        (r'''mar''', 3),
                        (r'''abr''', 4),
                        (r'''mai''', 5),
                        (r'''jun''', 6),
                        (r'''jul''', 7),
                        (r'''ago''', 8),
                        (r'''sept''', 9),
                        (r'''set''', 9),
                        (r'''out''', 10),
                        (r'''nov''', 11),
                        (r'''dez''', 12),
                        (r'''1''', 1),
                        (r'''2''', 2),
                        (r'''3''', 3),
                        (r'''4''', 4),
                        (r'''5''', 5),
                        (r'''6''', 6),
                        (r'''7''', 7),
                        (r'''8''', 8),
                        (r'''9''', 9),
                        (r'''10''', 10),
                        (r'''11''', 11),
                        (r'''12''', 12),
                        (r'''01''', 1),
                        (r'''02''', 2),
                        (r'''03''', 3),
                        (r'''04''', 4),
                        (r'''05''', 5),
                        (r'''06''', 6),
                        (r'''07''', 7),
                        (r'''08''', 8),
                        (r'''09''', 9)])
    Numbers = dict([(r'''zero''', 0),
                    (r'''um''', 1),
                    (r'''uma''', 1),
                    (r'''dois''', 2),
                    (r'''tres''', 3),
                    (r'''três''', 3),
                    (r'''quatro''', 4),
                    (r'''cinco''', 5),
                    (r'''seis''', 6),
                    (r'''sete''', 7),
                    (r'''oito''', 8),
                    (r'''nove''', 9),
                    (r'''dez''', 10),
                    (r'''onze''', 11),
                    (r'''doze''', 12),
                    (r'''dezena''', 12),
                    (r'''dezenas''', 12),
                    (r'''treze''', 13),
                    (r'''catorze''', 14),
                    (r'''quatorze''', 14),
                    (r'''quinze''', 15),
                    (r'''dezesseis''', 16),
                    (r'''dezasseis''', 16),
                    (r'''dezessete''', 17),
                    (r'''dezassete''', 17),
                    (r'''dezoito''', 18),
                    (r'''dezenove''', 19),
                    (r'''dezanove''', 19),
                    (r'''vinte''', 20),
                    (r'''vinte e um''', 21),
                    (r'''vinte e uma''', 21),
                    (r'''vinte e dois''', 22),
                    (r'''vinte e duas''', 22),
                    (r'''vinte e tres''', 23),
                    (r'''vinte e três''', 23),
                    (r'''vinte e quatro''', 24),
                    (r'''vinte e cinco''', 25),
                    (r'''vinte e seis''', 26),
                    (r'''vinte e sete''', 27),
                    (r'''vinte e oito''', 28),
                    (r'''vinte e nove''', 29),
                    (r'''trinta''', 30)])
    HolidayNames = dict([(r'''pai''', ["diadopai", "diadospais"]),
                         (r'''mae''', ["diadamae", "diadasmaes"]),
                         (r'''acaodegracas''', ["diadegracas", "diadeacaodegracas", "acaodegracas"]),
                         (r'''trabalho''', ["diadotrabalho", "diadotrabalhador", "diadostrabalhadores"]),
                         (r'''pascoa''', ["diadepascoa", "pascoa"]),
                         (r'''natal''', ["natal", "diadenatal"]),
                         (r'''vesperadenatal''', ["vesperadenatal"]),
                         (r'''anonovo''', ["anonovo", "diadeanonovo", "diadoanonovo"]),
                         (r'''vesperadeanonovo''', ["vesperadeanonovo", "vesperadoanonovo"]),
                         (r'''yuandan''', ["yuandan"]),
                         (r'''todosossantos''', ["todosossantos"]),
                         (r'''professor''', ["diadoprofessor", "diadosprofessores"]),
                         (r'''crianca''', ["diadacrianca", "diadascriancas"]),
                         (r'''mulher''', ["diadamulher"])])
    VariableHolidaysTimexDictionary = dict([(r'''pai''', r'''-06-WXX-7-3'''),
                                            (r'''mae''', r'''-05-WXX-7-2'''),
                                            (r'''acaodegracas''', r'''-11-WXX-4-4'''),
                                            (r'''trabalho''', r'''-05-WXX-1-1'''),
                                            (r'''memoria''', r'''-03-WXX-2-4''')])
    DoubleNumbers = dict([(r'''metade''', 0.5),
                          (r'''quarto''', 0.25)])
    DateTokenPrefix = 'em '
    TimeTokenPrefix = 'as '
    TokenBeforeDate = 'o '
    TokenBeforeTime = 'as '
    NextPrefixRegex = f'(pr[oó]xim[oa]|seguinte)\\b'
    PastPrefixRegex = f'([uú]ltim[oa])\\b'
    ThisPrefixRegex = f'([nd]?es[st][ea])\\b'
    RelativeDayRegex = f'^[\\.]'
    RestOfDateRegex = f'^[\\.]'
    RelativeDurationUnitRegex = f'^[\\.]'
    ReferenceDatePeriodRegex = f'^[.]'
    FromToRegex = f'\\b(from).+(to)\\b.+'
    SingleAmbiguousMonthRegex = f'^(the\\s+)?(may|march)$'
    UnspecificDatePeriodRegex = f'^[.]'
    PrepositionSuffixRegex = f'\\b(on|in|at|around|from|to)$'
    RestOfDateTimeRegex = f'^[\\.]'
    SetWeekDayRegex = f'^[\\.]'
    NightRegex = f'\\b(meia noite|noite|de noite)\\b'
    CommonDatePrefixRegex = f'\\b(dia)\\s+$'
    DurationUnitRegex = f'^[\\.]'
    DurationConnectorRegex = f'^[.]'
    CenturyRegex = f'^[.]'
    DecadeRegex = f'^[.]'
    DecadeWithCenturyRegex = f'^[.]'
    RelativeDecadeRegex = f'^[.]'
    YearSuffix = f'(,?\\s*({YearRegex}|{FullTextYearRegex}))'
    YearAfterRegex = f'^[.]'
    YearPeriodRegex = f'^[.]'
    FutureSuffixRegex = f'^[.]'
    WrittenDecades = dict([(r'''''', 0)])
    SpecialDecadeCases = dict([(r'''''', 0)])
    DefaultLanguageFallback = 'DMY'
    DurationDateRestrictions = []
    AmbiguityFiltersDict = dict([(r'''null''', r'''null''')])
    EarlyMorningTermList = [r'madrugada']
    MorningTermList = [r'manha', r'manhã']
    AfternoonTermList = [r'passado o meio dia', r'depois do meio dia']
    EveningTermList = [r'tarde']
    NightTermList = [r'noite']
    SameDayTerms = [r'hoje', r'este dia', r'esse dia', r'o dia']
    PlusOneDayTerms = [r'amanha', r'de amanha', r'dia seguinte', r'o dia de amanha', r'proximo dia']
    MinusOneDayTerms = [r'ontem', r'ultimo dia']
    PlusTwoDayTerms = [r'depois de amanha', r'dia depois de amanha']
    MinusTwoDayTerms = [r'anteontem', r'dia antes de ontem']
    MonthTerms = [r'mes', r'meses']
    MonthToDateTerms = [r'mes ate agora', r'mes ate hoje', r'mes ate a data']
    WeekendTerms = [r'fim de semana']
    WeekTerms = [r'semana']
    YearTerms = [r'ano', r'anos']
    YearToDateTerms = [r'ano ate agora', r'ano ate hoje', r'ano ate a data', r'anos ate agora', r'anos ate hoje', r'anos ate a data']
# pylint: enable=line-too-long
