# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------

from .base_numbers import BaseNumbers
# pylint: disable=line-too-long
class FrenchNumeric:
    LangMarker = 'Fr'
    RoundNumberIntegerRegex = f'(cent|mille|millions|million|milliard|milliards|billion|billions)'
    ZeroToNineIntegerRegex = f'(et un|un|une|deux|trois|quatre|cinq|six|sept|huit|neuf)'
    TenToNineteenIntegerRegex = f'((seize|quinze|quatorze|treize|douze|onze)|dix(\\Wneuf|\\Whuit|\\Wsept)?)'
    TensNumberIntegerRegex = f'(quatre\\Wvingt(s|\\Wdix)?|soixante\\Wdix|vingt|trente|quarante|cinquante|soixante|septante|octante|huitante|nonante)'
    DigitsNumberRegex = f'\\d|\\d{{1,3}}(\\.\\d{{3}})'
    NegativeNumberTermsRegex = f'^[.]'
    NegativeNumberSignRegex = f'^({NegativeNumberTermsRegex}\\s+).*'
    HundredsNumberIntegerRegex = f'(({ZeroToNineIntegerRegex}(\\s+cent))|cent|((\\s+cent\\s)+{TensNumberIntegerRegex}))'
    BelowHundredsRegex = f'(({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}([-\\s]+({TenToNineteenIntegerRegex}|{ZeroToNineIntegerRegex}))?))|{ZeroToNineIntegerRegex})'
    BelowThousandsRegex = f'(({HundredsNumberIntegerRegex}(\\s+{BelowHundredsRegex})?|{BelowHundredsRegex}|{TenToNineteenIntegerRegex})|cent\\s+{TenToNineteenIntegerRegex})'
    SupportThousandsRegex = f'(({BelowThousandsRegex}|{BelowHundredsRegex})\\s+{RoundNumberIntegerRegex}(\\s+{RoundNumberIntegerRegex})?)'
    SeparaIntRegex = f'({SupportThousandsRegex}(\\s+{SupportThousandsRegex})*(\\s+{BelowThousandsRegex})?|{BelowThousandsRegex})'
    AllIntRegex = f'({SeparaIntRegex}|mille(\\s+{BelowThousandsRegex})?)'
    NumbersWithPlaceHolder = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!([,\\.]\\d+[a-zA-Z]))(?={placeholder})'
    NumbersWithSuffix = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    RoundNumberIntegerRegexWithLocks = f'(?<=\\b)({DigitsNumberRegex})+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    NumbersWithDozenSuffix = f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+douzaine(s)?(?=\\b)'
    AllIntRegexWithLocks = f'((?<=\\b){AllIntRegex}(?=\\b))'
    AllIntRegexWithDozenSuffixLocks = f'(?<=\\b)(((demi\\s+)?\\s+douzaine)|({AllIntRegex}\\s+douzaines?))(?=\\b)'
    SimpleRoundOrdinalRegex = f'(centi[eè]me|milli[eè]me|millioni[eè]me|milliardi[eè]me|billioni[eè]me)'
    OneToNineOrdinalRegex = f'(premier|premi[eè]re|deuxi[eè]me|second[e]|troisi[eè]me|tiers|tierce|quatri[eè]me|cinqui[eè]me|sixi[eè]me|septi[eè]me|huiti[eè]me|neuvi[eè]me)'
    SpecialUnderHundredOrdinalRegex = f'(onzi[eè]me|douzi[eè]me)'
    TensOrdinalRegex = f'(quatre-vingt-dixi[eè]me|quatre-vingti[eè]me|huitanti[eè]me|octanti[eè]me|soixante-dixi[eè]me|septanti[eè]me|soixanti[eè]me|cinquanti[eè]me|quaranti[eè]me|trenti[eè]me|vingti[eè]me)'
    HundredOrdinalRegex = f'({AllIntRegex}(\\s+(centi[eè]me\\s)))'
    UnderHundredOrdinalRegex = f'((({AllIntRegex}(\\W)?)?{OneToNineOrdinalRegex})|({TensNumberIntegerRegex}(\\W)?)?{OneToNineOrdinalRegex}|{TensOrdinalRegex}|{SpecialUnderHundredOrdinalRegex})'
    UnderThousandOrdinalRegex = f'((({HundredOrdinalRegex}(\\s)?)?{UnderHundredOrdinalRegex})|(({AllIntRegex}(\\W)?)?{SimpleRoundOrdinalRegex})|{HundredOrdinalRegex})'
    OverThousandOrdinalRegex = f'(({AllIntRegex})(i[eè]me))'
    ComplexOrdinalRegex = f'(({OverThousandOrdinalRegex}(\\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex}|{UnderHundredOrdinalRegex})'
    SuffixOrdinalRegex = f'(({AllIntRegex})({SimpleRoundOrdinalRegex}))'
    ComplexRoundOrdinalRegex = f'((({SuffixOrdinalRegex}(\\s)?)?{ComplexOrdinalRegex})|{SuffixOrdinalRegex})'
    AllOrdinalRegex = f'({ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex})'
    PlaceHolderPureNumber = f'\\b'
    PlaceHolderDefault = f'\\D|\\b'
    OrdinalSuffixRegex = f'(?<=\\b)((\\d*(1er|2e|2eme|3e|3eme|4e|4eme|5e|5eme|6e|6eme|7e|7eme|8e|8eme|9e|9eme|0e|0eme))|(11e|11eme|12e|12eme))(?=\\b)'
    OrdinalFrenchRegex = f'(?<=\\b){AllOrdinalRegex}(?=\\b)'
    FractionNotationWithSpacesRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNotationRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNounRegex = f'(?<=\\b)({AllIntRegex}\\s+((et)\\s+)?)?({AllIntRegex})(\\s+((et)\\s)?)((({AllOrdinalRegex})s?|({SuffixOrdinalRegex})s?)|demis?|tiers?|quarts?)(?=\\b)'
    FractionNounWithArticleRegex = f'(?<=\\b)({AllIntRegex}\\s+(et\\s+)?)?(un|une)(\\s+)(({AllOrdinalRegex})|({SuffixOrdinalRegex})|(et\\s+)?demis?)(?=\\b)'
    FractionPrepositionRegex = f'(?<=\\b)(?<numerator>({AllIntRegex})|((?<!\\.)\\d+))\\s+sur\\s+(?<denominator>({AllIntRegex})|((\\d+)(?!\\.)))(?=\\b)'
    AllPointRegex = f'((\\s+{ZeroToNineIntegerRegex})+|(\\s+{SeparaIntRegex}))'
    AllFloatRegex = f'({AllIntRegex}(\\s+(virgule|point)){AllPointRegex})'
    DoubleDecimalPointRegex = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))\\d+[,\\.]\\d+(?!([,\\.]\\d+))(?={placeholder})'
    DoubleWithoutIntegralRegex = lambda placeholder: f'(?<=\\s|^)(?<!(\\d+))[,\\.]\\d+(?!([,\\.]\\d+))(?={placeholder})'
    DoubleWithMultiplierRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\[,\\.])))\\d+[,\\.]\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    DoubleWithRoundNumber = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\[,\\.])))\\d+[,\\.]\\d+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    DoubleAllFloatRegex = f'((?<=\\b){AllFloatRegex}(?=\\b))'
    DoubleExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))(\\d+([,\\.]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)'
    DoubleCaretExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))(\\d+([,\\.]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)'
    NumberWithSuffixPercentage = f'(?<!%)({BaseNumbers.NumberReplaceToken})(\\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(pourcentages|pourcents|pourcentage|pourcent)\\b)'
    NumberWithPrefixPercentage = f'((?<!{BaseNumbers.NumberReplaceToken})%|pourcent|pourcent des|pourcentage de)(\\s*)({BaseNumbers.NumberReplaceToken})(?=\\s|$)'
    DecimalSeparatorChar = ','
    FractionMarkerToken = 'sur'
    NonDecimalSeparatorChar = '.'
    HalfADozenText = 'six'
    WordSeparatorToken = 'et'
    WrittenDecimalSeparatorTexts = [r'virgule']
    WrittenGroupSeparatorTexts = [r'point', r'points']
    WrittenIntegerSeparatorTexts = [r'et', r'-']
    WrittenFractionSeparatorTexts = [r'et', r'sur']
    HalfADozenRegex = f'(?<=\\b)+demi\\s+douzaine'
    DigitalNumberRegex = f'((?<=\\b)(cent|mille|million|millions|milliard|milliards|billions|billion|douzaine(s)?)(?=\\b))|((?<=(\\d|\\b)){BaseNumbers.MultiplierLookupRegex}(?=\\b))'
    AmbiguousFractionConnectorsRegex = f'^[.]'
    CardinalNumberMap = dict([(r'''zéro''', 0),
                              (r'''zero''', 0),
                              (r'''un''', 1),
                              (r'''une''', 1),
                              (r'''deux''', 2),
                              (r'''trois''', 3),
                              (r'''quatre''', 4),
                              (r'''cinq''', 5),
                              (r'''six''', 6),
                              (r'''sept''', 7),
                              (r'''huit''', 8),
                              (r'''neuf''', 9),
                              (r'''dix''', 10),
                              (r'''onze''', 11),
                              (r'''douze''', 12),
                              (r'''treize''', 13),
                              (r'''quatorze''', 14),
                              (r'''quinze''', 15),
                              (r'''seize''', 16),
                              (r'''dix-sept''', 17),
                              (r'''dix-huit''', 18),
                              (r'''dix-neuf''', 19),
                              (r'''vingt''', 20),
                              (r'''trente''', 30),
                              (r'''quarante''', 40),
                              (r'''cinquante''', 50),
                              (r'''soixante''', 60),
                              (r'''soixante-dix''', 70),
                              (r'''septante''', 70),
                              (r'''quatre-vingts''', 80),
                              (r'''quatre-vingt''', 80),
                              (r'''quatre vingts''', 80),
                              (r'''quatre vingt''', 80),
                              (r'''quatre-vingt-dix''', 90),
                              (r'''quatre-vingt dix''', 90),
                              (r'''quatre vingt dix''', 90),
                              (r'''quatre-vingts-dix''', 90),
                              (r'''quatre-vingts-onze''', 91),
                              (r'''quatre-vingt-onze''', 91),
                              (r'''quatre-vingts-douze''', 92),
                              (r'''quatre-vingt-douze''', 92),
                              (r'''quatre-vingts-treize''', 93),
                              (r'''quatre-vingt-treize''', 93),
                              (r'''quatre-vingts-quatorze''', 94),
                              (r'''quatre-vingt-quatorze''', 94),
                              (r'''quatre-vingts-quinze''', 95),
                              (r'''quatre-vingt-quinze''', 95),
                              (r'''quatre-vingts-seize''', 96),
                              (r'''quatre-vingt-seize''', 96),
                              (r'''huitante''', 80),
                              (r'''octante''', 80),
                              (r'''nonante''', 90),
                              (r'''cent''', 100),
                              (r'''mille''', 1000),
                              (r'''un million''', 1000000),
                              (r'''million''', 1000000),
                              (r'''millions''', 1000000),
                              (r'''un milliard''', 1000000000),
                              (r'''milliard''', 1000000000),
                              (r'''milliards''', 1000000000),
                              (r'''un mille milliards''', 1000000000000),
                              (r'''un billion''', 1000000000000)])
    OrdinalNumberMap = dict([(r'''premier''', 1),
                             (r'''première''', 1),
                             (r'''premiere''', 1),
                             (r'''deuxième''', 2),
                             (r'''deuxieme''', 2),
                             (r'''second''', 2),
                             (r'''seconde''', 2),
                             (r'''troisième''', 3),
                             (r'''demi''', 2),
                             (r'''tiers''', 3),
                             (r'''tierce''', 3),
                             (r'''quart''', 4),
                             (r'''quarts''', 4),
                             (r'''troisieme''', 3),
                             (r'''quatrième''', 4),
                             (r'''quatrieme''', 4),
                             (r'''cinquième''', 5),
                             (r'''cinquieme''', 5),
                             (r'''sixième''', 6),
                             (r'''sixieme''', 6),
                             (r'''septième''', 7),
                             (r'''septieme''', 7),
                             (r'''huitième''', 8),
                             (r'''huitieme''', 8),
                             (r'''neuvième''', 9),
                             (r'''neuvieme''', 9),
                             (r'''dixième''', 10),
                             (r'''dixieme''', 10),
                             (r'''onzième''', 11),
                             (r'''onzieme''', 11),
                             (r'''douzième''', 12),
                             (r'''douzieme''', 12),
                             (r'''treizième''', 13),
                             (r'''treizieme''', 13),
                             (r'''quatorzième''', 14),
                             (r'''quatorizieme''', 14),
                             (r'''quinzième''', 15),
                             (r'''quinzieme''', 15),
                             (r'''seizième''', 16),
                             (r'''seizieme''', 16),
                             (r'''dix-septième''', 17),
                             (r'''dix-septieme''', 17),
                             (r'''dix-huitième''', 18),
                             (r'''dix-huitieme''', 18),
                             (r'''dix-neuvième''', 19),
                             (r'''dix-neuvieme''', 19),
                             (r'''vingtième''', 20),
                             (r'''vingtieme''', 20),
                             (r'''trentième''', 30),
                             (r'''trentieme''', 30),
                             (r'''quarantième''', 40),
                             (r'''quarantieme''', 40),
                             (r'''cinquantième''', 50),
                             (r'''cinquantieme''', 50),
                             (r'''soixantième''', 60),
                             (r'''soixantieme''', 60),
                             (r'''soixante-dixième''', 70),
                             (r'''soixante-dixieme''', 70),
                             (r'''septantième''', 70),
                             (r'''septantieme''', 70),
                             (r'''quatre-vingtième''', 80),
                             (r'''quatre-vingtieme''', 80),
                             (r'''huitantième''', 80),
                             (r'''huitantieme''', 80),
                             (r'''octantième''', 80),
                             (r'''octantieme''', 80),
                             (r'''quatre-vingt-dixième''', 90),
                             (r'''quatre-vingt-dixieme''', 90),
                             (r'''nonantième''', 90),
                             (r'''nonantieme''', 90),
                             (r'''centième''', 100),
                             (r'''centieme''', 100),
                             (r'''millième''', 1000),
                             (r'''millieme''', 1000),
                             (r'''millionième''', 1000000),
                             (r'''millionieme''', 1000000),
                             (r'''milliardième''', 1000000000),
                             (r'''milliardieme''', 1000000000),
                             (r'''billionieme''', 1000000000000),
                             (r'''billionième''', 1000000000000),
                             (r'''trillionième''', 1000000000000000000),
                             (r'''trillionieme''', 1000000000000000000)])
    PrefixCardinalMap = dict([(r'''deux''', 2),
                              (r'''trois''', 3),
                              (r'''quatre''', 4),
                              (r'''cinq''', 5),
                              (r'''six''', 6),
                              (r'''sept''', 7),
                              (r'''huit''', 8),
                              (r'''neuf''', 9),
                              (r'''dix''', 10),
                              (r'''onze''', 11),
                              (r'''douze''', 12),
                              (r'''treize''', 13),
                              (r'''quatorze''', 14),
                              (r'''quinze''', 15),
                              (r'''seize''', 16),
                              (r'''dix sept''', 17),
                              (r'''dix-sept''', 17),
                              (r'''dix-huit''', 18),
                              (r'''dix huit''', 18),
                              (r'''dix-neuf''', 19),
                              (r'''dix neuf''', 19),
                              (r'''vingt''', 20),
                              (r'''vingt-et-un''', 21),
                              (r'''vingt et un''', 21),
                              (r'''vingt-deux''', 21),
                              (r'''vingt deux''', 22),
                              (r'''vingt-trois''', 23),
                              (r'''vingt trois''', 23),
                              (r'''vingt-quatre''', 24),
                              (r'''vingt quatre''', 24),
                              (r'''vingt-cinq''', 25),
                              (r'''vingt cinq''', 25),
                              (r'''vingt-six''', 26),
                              (r'''vingt six''', 26),
                              (r'''vingt-sept''', 27),
                              (r'''vingt sept''', 27),
                              (r'''vingt-huit''', 28),
                              (r'''vingt huit''', 28),
                              (r'''vingt-neuf''', 29),
                              (r'''vingt neuf''', 29),
                              (r'''trente''', 30),
                              (r'''quarante''', 40),
                              (r'''cinquante''', 50),
                              (r'''soixante''', 60),
                              (r'''soixante-dix''', 70),
                              (r'''soixante dix''', 70),
                              (r'''septante''', 70),
                              (r'''quatre-vingt''', 80),
                              (r'''quatre vingt''', 80),
                              (r'''huitante''', 80),
                              (r'''octante''', 80),
                              (r'''nonante''', 90),
                              (r'''quatre vingt dix''', 90),
                              (r'''quatre-vingt-dix''', 90),
                              (r'''cent''', 100),
                              (r'''deux cent''', 200),
                              (r'''trois cents''', 300),
                              (r'''quatre cents''', 400),
                              (r'''cinq cent''', 500),
                              (r'''six cent''', 600),
                              (r'''sept cent''', 700),
                              (r'''huit cent''', 800),
                              (r'''neuf cent''', 900)])
    SuffixOrdinalMap = dict([(r'''millième''', 1000),
                             (r'''million''', 1000000),
                             (r'''milliardième''', 1000000000000)])
    RoundNumberMap = dict([(r'''cent''', 100),
                           (r'''mille''', 1000),
                           (r'''million''', 1000000),
                           (r'''millions''', 1000000),
                           (r'''milliard''', 1000000000),
                           (r'''milliards''', 1000000000),
                           (r'''billion''', 1000000000000),
                           (r'''billions''', 1000000000000),
                           (r'''centieme''', 100),
                           (r'''centième''', 100),
                           (r'''millieme''', 1000),
                           (r'''millième''', 1000),
                           (r'''millionième''', 1000000),
                           (r'''millionieme''', 1000000),
                           (r'''milliardième''', 1000000000),
                           (r'''milliardieme''', 1000000000),
                           (r'''billionième''', 1000000000000),
                           (r'''billionieme''', 1000000000000),
                           (r'''centiemes''', 100),
                           (r'''centièmes''', 100),
                           (r'''millièmes''', 1000),
                           (r'''milliemes''', 1000),
                           (r'''millionièmes''', 1000000),
                           (r'''millioniemes''', 1000000),
                           (r'''milliardièmes''', 1000000000),
                           (r'''milliardiemes''', 1000000000),
                           (r'''billionièmes''', 1000000000000),
                           (r'''billioniemes''', 1000000000000),
                           (r'''douzaine''', 12),
                           (r'''douzaines''', 12),
                           (r'''k''', 1000),
                           (r'''m''', 1000000),
                           (r'''g''', 1000000000),
                           (r'''b''', 1000000000),
                           (r'''t''', 1000000000000)])
# pylint: enable=line-too-long
