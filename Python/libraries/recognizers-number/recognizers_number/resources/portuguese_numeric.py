# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------

from .base_numbers import BaseNumbers
# pylint: disable=line-too-long
class PortugueseNumeric:
    LangMarker = 'Por'
    HundredsNumberIntegerRegex = f'(quatrocent[ao]s|trezent[ao]s|seiscent[ao]s|setecent[ao]s|oitocent[ao]s|novecent[ao]s|duzent[ao]s|quinhent[ao]s|cem|(?<!por\\s+)(cento))'
    RoundNumberIntegerRegex = f'(mil|milh[ãa]o|milh[õo]es|bilh[ãa]o|bilh[õo]es|trilh[ãa]o|trilh[õo]es|qua[td]rilh[ãa]o|qua[td]rilh[õo]es|quintilh[ãa]o|quintilh[õo]es)'
    ZeroToNineIntegerRegex = f'(quatro|cinco|sete|nove|zero|tr[êe]s|seis|oito|dois|duas|um|uma)'
    TenToNineteenIntegerRegex = f'(dez[ea]sseis|dez[ea]ssete|dez[ea]nove|dezoito|quatorze|catorze|quinze|treze|d[ée]z|onze|doze)'
    TensNumberIntegerRegex = f'(cinquenta|quarenta|trinta|sessenta|setenta|oitenta|noventa|vinte)'
    DigitsNumberRegex = f'\\d|\\d{{1,3}}(\\.\\d{{3}})'
    BelowHundredsRegex = f'(({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\\s+e\\s+{ZeroToNineIntegerRegex})?))|{ZeroToNineIntegerRegex})'
    BelowThousandsRegex = f'({HundredsNumberIntegerRegex}(\\s+e\\s+{BelowHundredsRegex})?|{BelowHundredsRegex})'
    SupportThousandsRegex = f'(({BelowThousandsRegex}|{BelowHundredsRegex})\\s+{RoundNumberIntegerRegex}(\\s+{RoundNumberIntegerRegex})?)'
    NegativeNumberTermsRegex = f'^[.]'
    NegativeNumberSignRegex = f'^({NegativeNumberTermsRegex}\\s+).*'
    SeparaIntRegex = f'({SupportThousandsRegex}(\\s+{SupportThousandsRegex})*(\\s+{BelowThousandsRegex})?|{BelowThousandsRegex})'
    AllIntRegex = f'({SeparaIntRegex}|mil(\\s+{BelowThousandsRegex})?)'
    AllPointRegex = f'((\\s+{ZeroToNineIntegerRegex})+|(\\s+{AllIntRegex}))'
    SpecialFractionInteger = f'((({AllIntRegex})i?({ZeroToNineIntegerRegex})|({AllIntRegex}))\\s+a?v[oa]s?)'
    PlaceHolderDefault = f'\\D|\\b'
    PlaceHolderPureNumber = f'\\b'
    AllIntRegexWithLocks = f'((?<=\\b){AllIntRegex}(?=\\b))'
    AllIntRegexWithDozenSuffixLocks = f'(?<=\\b)(((meia)?\\s+(d[úu]zia))|({AllIntRegex}\\s+(e|com)\\s+)?({AllIntRegex}\\s+(d[úu]zia(s)?|dezena(s)?)))(?=\\b)'
    NumbersWithPlaceHolder = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!(,\\d+[a-zA-Z]))(?={placeholder})'
    NumbersWithSuffix = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    RoundNumberIntegerRegexWithLocks = f'(?<=\\b)({DigitsNumberRegex})+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    NumbersWithDozenSuffix = f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dezena(s)?(?=\\b)'
    NumbersWithDozen2Suffix = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+d[úu]zia(s)(?=\\b)'
    SimpleRoundOrdinalRegex = f'(mil[eé]sim[oa]|milion[eé]sim[oa]|bilion[eé]sim[oa]|trilion[eé]sim[oa]|quatrilion[eé]sim[oa]|quintilion[eé]sim[oa])'
    OneToNineOrdinalRegex = f'(primeir[oa]|segund[oa]|terceir[oa]|quart[oa]|quint[oa]|sext[oa]|s[eé]tim[oa]|oitav[oa]|non[oa])'
    TensOrdinalRegex = f'(nonag[eé]sim[oa]|octog[eé]sim[oa]|setuag[eé]sim[oa]|septuag[eé]sim[oa]|sexag[eé]sim[oa]|quinquag[eé]sim[oa]|quadrag[eé]sim[oa]|trig[eé]sim[oa]|vig[eé]sim[oa]|d[eé]cim[oa])'
    HundredOrdinalRegex = f'(cent[eé]sim[oa]|ducent[eé]sim[oa]|tricent[eé]sim[oa]|cuadringent[eé]sim[oa]|quingent[eé]sim[oa]|sexcent[eé]sim[oa]|septingent[eé]sim[oa]|octingent[eé]sim[oa]|noningent[eé]sim[oa])'
    SpecialUnderHundredOrdinalRegex = f'(und[eé]cim[oa]|duod[eé]cimo)'
    UnderHundredOrdinalRegex = f'((({TensOrdinalRegex}(\\s)?)?{OneToNineOrdinalRegex})|{TensOrdinalRegex}|{SpecialUnderHundredOrdinalRegex})'
    UnderThousandOrdinalRegex = f'((({HundredOrdinalRegex}(\\s)?)?{UnderHundredOrdinalRegex})|{HundredOrdinalRegex})'
    OverThousandOrdinalRegex = f'(({AllIntRegex})([eé]sim[oa]))'
    ComplexOrdinalRegex = f'(({OverThousandOrdinalRegex}(\\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})'
    SuffixRoundOrdinalRegex = f'(({AllIntRegex})({SimpleRoundOrdinalRegex}))'
    ComplexRoundOrdinalRegex = f'((({SuffixRoundOrdinalRegex}(\\s)?)?{ComplexOrdinalRegex})|{SuffixRoundOrdinalRegex})'
    AllOrdinalRegex = f'{ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex}'
    OrdinalSuffixRegex = f'(?<=\\b)(\\d*(1[oaº]|2[oaº]|3[oaº]|4[oaº]|5[oaº]|6[oaº]|7[oaº]|8[oaº]|9[oaº]|0[oaº]|1.º|2.º|3.º|4.º|5.º|6.º|7.º|8.º|9.º))(?=\\b)'
    OrdinalEnglishRegex = f'(?<=\\b){AllOrdinalRegex}(?=\\b)'
    FractionNotationRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNotationWithSpacesRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNounRegex = f'(?<=\\b)({AllIntRegex}\\s+((e|com)\\s+)?)?({AllIntRegex})(\\s+((e|com)\\s)?)((({AllOrdinalRegex})s?|({SpecialFractionInteger})|({SuffixRoundOrdinalRegex})s?)|mei[oa]?|ter[çc]o?)(?=\\b)'
    FractionNounWithArticleRegex = f'(?<=\\b)({AllIntRegex}\\s+(e\\s+)?)?(um|um[as])(\\s+)(({AllOrdinalRegex})|({SuffixRoundOrdinalRegex})|(e\\s+)?mei[oa]?)(?=\\b)'
    FractionPrepositionRegex = f'(?<=\\b)(?<numerator>({AllIntRegex})|((?<!\\.)\\d+))\\s+sobre\\s+(?<denominator>({AllIntRegex})|((\\d+)(?!\\.)))(?=\\b)'
    AllFloatRegex = f'{AllIntRegex}(\\s+(vírgula|virgula|e|ponto)){AllPointRegex}'
    DoubleWithMultiplierRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\,)))\\d+,\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    DoubleExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)'
    DoubleCaretExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)'
    DoubleDecimalPointRegex = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))\\d+,\\d+(?!(,\\d+))(?={placeholder})'
    DoubleWithoutIntegralRegex = lambda placeholder: f'(?<=\\s|^)(?<!(\\d+)),\\d+(?!(,\\d+))(?={placeholder})'
    DoubleWithRoundNumber = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\,)))\\d+,\\d+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    DoubleAllFloatRegex = f'((?<=\\b){AllFloatRegex}(?=\\b))'
    NumberWithSuffixPercentage = f'(?<!%)({BaseNumbers.NumberReplaceToken})(\\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(por cento|pontos percentuais)\\b)'
    AmbiguousFractionConnectorsRegex = f'^[.]'
    DecimalSeparatorChar = ','
    FractionMarkerToken = 'sobre'
    NonDecimalSeparatorChar = '.'
    HalfADozenText = 'seis'
    WordSeparatorToken = 'e'
    WrittenDecimalSeparatorTexts = [r'virgula', r'vírgula']
    WrittenGroupSeparatorTexts = [r'ponto']
    WrittenIntegerSeparatorTexts = [r'e']
    WrittenFractionSeparatorTexts = [r'com']
    WrittenFractionSuffix = [r'avo', r'ava']
    PluralSuffix = 's'
    HalfADozenRegex = f'meia\\s+d[uú]zia'
    DigitalNumberRegex = f'((?<=\\b)(mil|cem|milh[oõ]es|milh[aã]o|bilh[oõ]es|bilh[aã]o|trilh[oõ]es|trilh[aã]o|milhares|centena|centenas|dezena|dezenas?)(?=\\b))|((?<=(\\d|\\b)){BaseNumbers.MultiplierLookupRegex}(?=\\b))'
    CardinalNumberMap = dict([(r'''zero''', 0),
                              (r'''hum''', 1),
                              (r'''um''', 1),
                              (r'''uma''', 1),
                              (r'''dois''', 2),
                              (r'''duas''', 2),
                              (r'''meia''', 2),
                              (r'''meio''', 2),
                              (r'''tres''', 3),
                              (r'''três''', 3),
                              (r'''quatro''', 4),
                              (r'''cinco''', 5),
                              (r'''seis''', 6),
                              (r'''sete''', 7),
                              (r'''oito''', 8),
                              (r'''nove''', 9),
                              (r'''dez''', 10),
                              (r'''dezena''', 10),
                              (r'''déz''', 10),
                              (r'''onze''', 11),
                              (r'''doze''', 12),
                              (r'''dúzia''', 12),
                              (r'''duzia''', 12),
                              (r'''dúzias''', 12),
                              (r'''duzias''', 12),
                              (r'''treze''', 13),
                              (r'''catorze''', 14),
                              (r'''quatorze''', 14),
                              (r'''quinze''', 15),
                              (r'''dezesseis''', 16),
                              (r'''dezasseis''', 16),
                              (r'''dezessete''', 17),
                              (r'''dezassete''', 17),
                              (r'''dezoito''', 18),
                              (r'''dezenove''', 19),
                              (r'''dezanove''', 19),
                              (r'''vinte''', 20),
                              (r'''trinta''', 30),
                              (r'''quarenta''', 40),
                              (r'''cinquenta''', 50),
                              (r'''cincoenta''', 50),
                              (r'''sessenta''', 60),
                              (r'''setenta''', 70),
                              (r'''oitenta''', 80),
                              (r'''noventa''', 90),
                              (r'''cem''', 100),
                              (r'''cento''', 100),
                              (r'''duzentos''', 200),
                              (r'''duzentas''', 200),
                              (r'''trezentos''', 300),
                              (r'''trezentas''', 300),
                              (r'''quatrocentos''', 400),
                              (r'''quatrocentas''', 400),
                              (r'''quinhentos''', 500),
                              (r'''quinhentas''', 500),
                              (r'''seiscentos''', 600),
                              (r'''seiscentas''', 600),
                              (r'''setecentos''', 700),
                              (r'''setecentas''', 700),
                              (r'''oitocentos''', 800),
                              (r'''oitocentas''', 800),
                              (r'''novecentos''', 900),
                              (r'''novecentas''', 900),
                              (r'''mil''', 1000),
                              (r'''milhão''', 1000000),
                              (r'''milhao''', 1000000),
                              (r'''milhões''', 1000000),
                              (r'''milhoes''', 1000000),
                              (r'''bilhão''', 1000000000),
                              (r'''bilhao''', 1000000000),
                              (r'''bilhões''', 1000000000),
                              (r'''bilhoes''', 1000000000),
                              (r'''trilhão''', 1000000000000),
                              (r'''trilhao''', 1000000000000),
                              (r'''trilhões''', 1000000000000),
                              (r'''trilhoes''', 1000000000000)])
    OrdinalNumberMap = dict([(r'''primeiro''', 1),
                             (r'''primeira''', 1),
                             (r'''segundo''', 2),
                             (r'''segunda''', 2),
                             (r'''terceiro''', 3),
                             (r'''terceira''', 3),
                             (r'''quarto''', 4),
                             (r'''quarta''', 4),
                             (r'''quinto''', 5),
                             (r'''quinta''', 5),
                             (r'''sexto''', 6),
                             (r'''sexta''', 6),
                             (r'''sétimo''', 7),
                             (r'''setimo''', 7),
                             (r'''sétima''', 7),
                             (r'''setima''', 7),
                             (r'''oitavo''', 8),
                             (r'''oitava''', 8),
                             (r'''nono''', 9),
                             (r'''nona''', 9),
                             (r'''décimo''', 10),
                             (r'''decimo''', 10),
                             (r'''décima''', 10),
                             (r'''decima''', 10),
                             (r'''undécimo''', 11),
                             (r'''undecimo''', 11),
                             (r'''undécima''', 11),
                             (r'''undecima''', 11),
                             (r'''duodécimo''', 11),
                             (r'''duodecimo''', 11),
                             (r'''duodécima''', 11),
                             (r'''duodecima''', 11),
                             (r'''vigésimo''', 20),
                             (r'''vigesimo''', 20),
                             (r'''vigésima''', 20),
                             (r'''vigesima''', 20),
                             (r'''trigésimo''', 30),
                             (r'''trigesimo''', 30),
                             (r'''trigésima''', 30),
                             (r'''trigesima''', 30),
                             (r'''quadragésimo''', 40),
                             (r'''quadragesimo''', 40),
                             (r'''quadragésima''', 40),
                             (r'''quadragesima''', 40),
                             (r'''quinquagésimo''', 50),
                             (r'''quinquagesimo''', 50),
                             (r'''quinquagésima''', 50),
                             (r'''quinquagesima''', 50),
                             (r'''sexagésimo''', 60),
                             (r'''sexagesimo''', 60),
                             (r'''sexagésima''', 60),
                             (r'''sexagesima''', 60),
                             (r'''septuagésimo''', 70),
                             (r'''septuagesimo''', 70),
                             (r'''septuagésima''', 70),
                             (r'''septuagesima''', 70),
                             (r'''setuagésimo''', 70),
                             (r'''setuagesimo''', 70),
                             (r'''setuagésima''', 70),
                             (r'''setuagesima''', 70),
                             (r'''octogésimo''', 80),
                             (r'''octogesimo''', 80),
                             (r'''octogésima''', 80),
                             (r'''octogesima''', 80),
                             (r'''nonagésimo''', 90),
                             (r'''nonagesimo''', 90),
                             (r'''nonagésima''', 90),
                             (r'''nonagesima''', 90),
                             (r'''centesimo''', 100),
                             (r'''centésimo''', 100),
                             (r'''centesima''', 100),
                             (r'''centésima''', 100),
                             (r'''ducentésimo''', 200),
                             (r'''ducentesimo''', 200),
                             (r'''ducentésima''', 200),
                             (r'''ducentesima''', 200),
                             (r'''tricentésimo''', 300),
                             (r'''tricentesimo''', 300),
                             (r'''tricentésima''', 300),
                             (r'''tricentesima''', 300),
                             (r'''trecentésimo''', 300),
                             (r'''trecentesimo''', 300),
                             (r'''trecentésima''', 300),
                             (r'''trecentesima''', 300),
                             (r'''quadringentésimo''', 400),
                             (r'''quadringentesimo''', 400),
                             (r'''quadringentésima''', 400),
                             (r'''quadringentesima''', 400),
                             (r'''quingentésimo''', 500),
                             (r'''quingentesimo''', 500),
                             (r'''quingentésima''', 500),
                             (r'''quingentesima''', 500),
                             (r'''sexcentésimo''', 600),
                             (r'''sexcentesimo''', 600),
                             (r'''sexcentésima''', 600),
                             (r'''sexcentesima''', 600),
                             (r'''seiscentésimo''', 600),
                             (r'''seiscentesimo''', 600),
                             (r'''seiscentésima''', 600),
                             (r'''seiscentesima''', 600),
                             (r'''septingentésimo''', 700),
                             (r'''septingentesimo''', 700),
                             (r'''septingentésima''', 700),
                             (r'''septingentesima''', 700),
                             (r'''setingentésimo''', 700),
                             (r'''setingentesimo''', 700),
                             (r'''setingentésima''', 700),
                             (r'''setingentesima''', 700),
                             (r'''octingentésimo''', 800),
                             (r'''octingentesimo''', 800),
                             (r'''octingentésima''', 800),
                             (r'''octingentesima''', 800),
                             (r'''noningentésimo''', 900),
                             (r'''noningentesimo''', 900),
                             (r'''noningentésima''', 900),
                             (r'''noningentesima''', 900),
                             (r'''nongentésimo''', 900),
                             (r'''nongentesimo''', 900),
                             (r'''nongentésima''', 900),
                             (r'''nongentesima''', 900),
                             (r'''milésimo''', 1000),
                             (r'''milesimo''', 1000),
                             (r'''milésima''', 1000),
                             (r'''milesima''', 1000),
                             (r'''milionésimo''', 1000000),
                             (r'''milionesimo''', 1000000),
                             (r'''milionésima''', 1000000),
                             (r'''milionesima''', 1000000),
                             (r'''bilionésimo''', 1000000000),
                             (r'''bilionesimo''', 1000000000),
                             (r'''bilionésima''', 1000000000),
                             (r'''bilionesima''', 1000000000)])
    PrefixCardinalMap = dict([(r'''hum''', 1),
                              (r'''dois''', 2),
                              (r'''tres''', 3),
                              (r'''três''', 3),
                              (r'''quatro''', 4),
                              (r'''cinco''', 5),
                              (r'''seis''', 6),
                              (r'''sete''', 7),
                              (r'''oito''', 8),
                              (r'''nove''', 9),
                              (r'''dez''', 10),
                              (r'''onze''', 11),
                              (r'''doze''', 12),
                              (r'''treze''', 13),
                              (r'''catorze''', 14),
                              (r'''quatorze''', 14),
                              (r'''quinze''', 15),
                              (r'''dezesseis''', 16),
                              (r'''dezasseis''', 16),
                              (r'''dezessete''', 17),
                              (r'''dezassete''', 17),
                              (r'''dezoito''', 18),
                              (r'''dezenove''', 19),
                              (r'''dezanove''', 19),
                              (r'''vinte''', 20),
                              (r'''trinta''', 30),
                              (r'''quarenta''', 40),
                              (r'''cinquenta''', 50),
                              (r'''cincoenta''', 50),
                              (r'''sessenta''', 60),
                              (r'''setenta''', 70),
                              (r'''oitenta''', 80),
                              (r'''noventa''', 90),
                              (r'''cem''', 100),
                              (r'''duzentos''', 200),
                              (r'''trezentos''', 300),
                              (r'''quatrocentos''', 400),
                              (r'''quinhentos''', 500),
                              (r'''seiscentos''', 600),
                              (r'''setecentos''', 700),
                              (r'''oitocentos''', 800),
                              (r'''novecentos''', 900)])
    SuffixOrdinalMap = dict([(r'''milesimo''', 1000),
                             (r'''milionesimo''', 1000000),
                             (r'''bilionesimo''', 1000000000),
                             (r'''trilionesimo''', 1000000000000)])
    RoundNumberMap = dict([(r'''mil''', 1000),
                           (r'''milesimo''', 1000),
                           (r'''milhão''', 1000000),
                           (r'''milhao''', 1000000),
                           (r'''milhões''', 1000000),
                           (r'''milhoes''', 1000000),
                           (r'''milionésimo''', 1000000),
                           (r'''milionesimo''', 1000000),
                           (r'''bilhão''', 1000000000),
                           (r'''bilhao''', 1000000000),
                           (r'''bilhões''', 1000000000),
                           (r'''bilhoes''', 1000000000),
                           (r'''bilionésimo''', 1000000000),
                           (r'''bilionesimo''', 1000000000),
                           (r'''trilhão''', 1000000000000),
                           (r'''trilhao''', 1000000000000),
                           (r'''trilhões''', 1000000000000),
                           (r'''trilhoes''', 1000000000000),
                           (r'''trilionésimo''', 1000000000000),
                           (r'''trilionesimo''', 1000000000000),
                           (r'''dezena''', 10),
                           (r'''dezenas''', 10),
                           (r'''dúzia''', 12),
                           (r'''duzia''', 12),
                           (r'''dúzias''', 12),
                           (r'''duzias''', 12),
                           (r'''k''', 1000),
                           (r'''m''', 1000000),
                           (r'''g''', 1000000000),
                           (r'''b''', 1000000000),
                           (r'''t''', 1000000000000)])
# pylint: enable=line-too-long
