# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------

from .base_numbers import BaseNumbers
# pylint: disable=line-too-long
class SpanishNumeric:
    LangMarker = 'Spa'
    HundredsNumberIntegerRegex = f'(cuatrocient[ao]s|trescient[ao]s|seiscient[ao]s|setecient[ao]s|ochocient[ao]s|novecient[ao]s|doscient[ao]s|quinient[ao]s|(?<!por\\s+)(cien(to)?))'
    RoundNumberIntegerRegex = f'(mil millones|mil|millones|mill[oó]n|billones|bill[oó]n|trillones|trill[oó]n|cuatrillones|cuatrill[oó]n|quintillones|quintill[oó]n|sextillones|sextill[oó]n|septillones|septill[oó]n)'
    ZeroToNineIntegerRegex = f'(cuatro|cinco|siete|nueve|cero|tres|seis|ocho|dos|un[ao]?)'
    TenToNineteenIntegerRegex = f'(diecisiete|diecinueve|diecis[eé]is|dieciocho|catorce|quince|trece|diez|once|doce)'
    TwentiesIntegerRegex = f'(veinticuatro|veinticinco|veintisiete|veintinueve|veintitr[eé]s|veintis[eé]is|veintiocho|veintid[oó]s|ventiun[ao]|veinti[uú]n[oa]?|veinte)'
    TensNumberIntegerRegex = f'(cincuenta|cuarenta|treinta|sesenta|setenta|ochenta|noventa)'
    NegativeNumberTermsRegex = f'^[.]'
    NegativeNumberSignRegex = f'^({NegativeNumberTermsRegex}\\s+).*'
    DigitsNumberRegex = f'\\d|\\d{{1,3}}(\\.\\d{{3}})'
    BelowHundredsRegex = f'(({TenToNineteenIntegerRegex}|{TwentiesIntegerRegex}|({TensNumberIntegerRegex}(\\s+y\\s+{ZeroToNineIntegerRegex})?))|{ZeroToNineIntegerRegex})'
    BelowThousandsRegex = f'({HundredsNumberIntegerRegex}(\\s+{BelowHundredsRegex})?|{BelowHundredsRegex})'
    SupportThousandsRegex = f'(({BelowThousandsRegex}|{BelowHundredsRegex})\\s+{RoundNumberIntegerRegex}(\\s+{RoundNumberIntegerRegex})?)'
    SeparaIntRegex = f'({SupportThousandsRegex}(\\s+{SupportThousandsRegex})*(\\s+{BelowThousandsRegex})?|{BelowThousandsRegex})'
    AllIntRegex = f'({SeparaIntRegex}|mil(\\s+{BelowThousandsRegex})?)'
    PlaceHolderPureNumber = f'\\b'
    PlaceHolderDefault = f'\\D|\\b'
    NumbersWithPlaceHolder = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!([\\.,]\\d+[a-zA-Z]))(?={placeholder})'
    NumbersWithSuffix = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    RoundNumberIntegerRegexWithLocks = f'(?<=\\b)({DigitsNumberRegex})+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    NumbersWithDozenSuffix = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+docenas?(?=\\b)'
    AllIntRegexWithLocks = f'((?<=\\b){AllIntRegex}(?=\\b))'
    AllIntRegexWithDozenSuffixLocks = f'(?<=\\b)(((media\\s+)?\\s+docena)|({AllIntRegex}\\s+(y|con)\\s+)?({AllIntRegex}\\s+docenas?))(?=\\b)'
    SimpleRoundOrdinalRegex = f'(mil[eé]simo|millon[eé]sim[oa]|billon[eé]sim[oa]|trillon[eé]sim[oa]|cuatrillon[eé]sim[oa]|quintillon[eé]sim[oa]|sextillon[eé]sim[oa]|septillon[eé]sim[oa])'
    OneToNineOrdinalRegex = f'(primer[oa]|segund[oa]|tercer[oa]|cuart[oa]|quint[oa]|sext[oa]|s[eé]ptim[oa]|octav[oa]|noven[oa])'
    TensOrdinalRegex = f'(nonag[eé]sim[oa]|octog[eé]sim[oa]|septuag[eé]sim[oa]|sexag[eé]sim[oa]|quincuag[eé]sim[oa]|cuadrag[eé]sim[oa]|trig[eé]sim[oa]|vig[eé]sim[oa]|d[eé]cim[oa])'
    HundredOrdinalRegex = f'(cent[eé]sim[oa]|ducent[eé]sim[oa]|tricent[eé]sim[oa]|cuadringent[eé]sim[oa]|quingent[eé]sim[oa]|sexcent[eé]sim[oa]|septingent[eé]sim[oa]|octingent[eé]sim[oa]|noningent[eé]sim[oa])'
    SpecialUnderHundredOrdinalRegex = f'(und[eé]cim[oa]|duod[eé]cimo|decimoctav[oa])'
    UnderHundredOrdinalRegex = f'((({TensOrdinalRegex}(\\s)?)?{OneToNineOrdinalRegex})|{TensOrdinalRegex}|{SpecialUnderHundredOrdinalRegex})'
    UnderThousandOrdinalRegex = f'((({HundredOrdinalRegex}(\\s)?)?{UnderHundredOrdinalRegex})|{HundredOrdinalRegex})'
    OverThousandOrdinalRegex = f'(({AllIntRegex})([eé]sim[oa]))'
    ComplexOrdinalRegex = f'(({OverThousandOrdinalRegex}(\\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})'
    SufixRoundOrdinalRegex = f'(({AllIntRegex})({SimpleRoundOrdinalRegex}))'
    ComplexRoundOrdinalRegex = f'((({SufixRoundOrdinalRegex}(\\s)?)?{ComplexOrdinalRegex})|{SufixRoundOrdinalRegex})'
    AllOrdinalRegex = f'{ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex}'
    OrdinalSuffixRegex = f'(?<=\\b)(\\d*(1r[oa]|2d[oa]|3r[oa]|4t[oa]|5t[oa]|6t[oa]|7m[oa]|8v[oa]|9n[oa]|0m[oa]|11[vm][oa]|12[vm][oa]))(?=\\b)'
    OrdinalNounRegex = f'(?<=\\b){AllOrdinalRegex}(?=\\b)'
    SpecialFractionInteger = f'((({AllIntRegex})i?({ZeroToNineIntegerRegex})|({AllIntRegex}))a?v[oa]s?)'
    FractionNotationRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNotationWithSpacesRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNounRegex = f'(?<=\\b)({AllIntRegex}\\s+((y|con)\\s+)?)?({AllIntRegex})(\\s+((y|con)\\s)?)((({AllOrdinalRegex})s?|({SpecialFractionInteger})|({SufixRoundOrdinalRegex})s?)|medi[oa]s?|tercios?)(?=\\b)'
    FractionNounWithArticleRegex = f'(?<=\\b)({AllIntRegex}\\s+(y\\s+)?)?(un|un[oa])(\\s+)(({AllOrdinalRegex})|({SufixRoundOrdinalRegex})|(y\\s+)?medi[oa]s?)(?=\\b)'
    FractionPrepositionRegex = f'(?<=\\b)(?<numerator>({AllIntRegex})|((?<!\\.)\\d+))\\s+sobre\\s+(?<denominator>({AllIntRegex})|((\\d+)(?!\\.)))(?=\\b)'
    AllPointRegex = f'((\\s+{ZeroToNineIntegerRegex})+|(\\s+{AllIntRegex}))'
    AllFloatRegex = f'{AllIntRegex}(\\s+(coma|con)){AllPointRegex}'
    DoubleDecimalPointRegex = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+(?!([\\.,]\\d+))(?={placeholder})'
    DoubleWithoutIntegralRegex = lambda placeholder: f'(?<=\\s|^)(?<!(\\d+))[\\.,]\\d+(?!([\\.,]\\d+))(?={placeholder})'
    DoubleWithMultiplierRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\[\\.,])))\\d+[\\.,]\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    DoubleWithRoundNumber = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\[\\.,])))\\d+[\\.,]\\d+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    DoubleAllFloatRegex = f'((?<=\\b){AllFloatRegex}(?=\\b))'
    DoubleExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)'
    DoubleCaretExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)'
    NumberWithPrefixPercentage = f'(?<!%)({BaseNumbers.NumberReplaceToken})(\\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(por ciento|por cien)\\b)'
    DecimalSeparatorChar = ','
    FractionMarkerToken = 'sobre'
    NonDecimalSeparatorChar = '.'
    HalfADozenText = 'seis'
    WordSeparatorToken = 'y'
    WrittenDecimalSeparatorTexts = [r'coma', r'con']
    WrittenGroupSeparatorTexts = [r'punto']
    WrittenIntegerSeparatorTexts = [r'y']
    WrittenFractionSeparatorTexts = [r'con']
    HalfADozenRegex = f'media\\s+docena'
    DigitalNumberRegex = f'((?<=\\b)(mil|millones|mill[oó]n|billones|bill[oó]n|trillones|trill[oó]n|docenas?)(?=\\b))|((?<=(\\d|\\b)){BaseNumbers.MultiplierLookupRegex}(?=\\b))'
    CardinalNumberMap = dict([(r'''cero''', 0),
                              (r'''un''', 1),
                              (r'''una''', 1),
                              (r'''uno''', 1),
                              (r'''dos''', 2),
                              (r'''tres''', 3),
                              (r'''cuatro''', 4),
                              (r'''cinco''', 5),
                              (r'''seis''', 6),
                              (r'''siete''', 7),
                              (r'''ocho''', 8),
                              (r'''nueve''', 9),
                              (r'''diez''', 10),
                              (r'''once''', 11),
                              (r'''doce''', 12),
                              (r'''docena''', 12),
                              (r'''docenas''', 12),
                              (r'''trece''', 13),
                              (r'''catorce''', 14),
                              (r'''quince''', 15),
                              (r'''dieciseis''', 16),
                              (r'''dieciséis''', 16),
                              (r'''diecisiete''', 17),
                              (r'''dieciocho''', 18),
                              (r'''diecinueve''', 19),
                              (r'''veinte''', 20),
                              (r'''ventiuna''', 21),
                              (r'''ventiuno''', 21),
                              (r'''veintiun''', 21),
                              (r'''veintiún''', 21),
                              (r'''veintiuno''', 21),
                              (r'''veintiuna''', 21),
                              (r'''veintidos''', 22),
                              (r'''veintidós''', 22),
                              (r'''veintitres''', 23),
                              (r'''veintitrés''', 23),
                              (r'''veinticuatro''', 24),
                              (r'''veinticinco''', 25),
                              (r'''veintiseis''', 26),
                              (r'''veintiséis''', 26),
                              (r'''veintisiete''', 27),
                              (r'''veintiocho''', 28),
                              (r'''veintinueve''', 29),
                              (r'''treinta''', 30),
                              (r'''cuarenta''', 40),
                              (r'''cincuenta''', 50),
                              (r'''sesenta''', 60),
                              (r'''setenta''', 70),
                              (r'''ochenta''', 80),
                              (r'''noventa''', 90),
                              (r'''cien''', 100),
                              (r'''ciento''', 100),
                              (r'''doscientas''', 200),
                              (r'''doscientos''', 200),
                              (r'''trescientas''', 300),
                              (r'''trescientos''', 300),
                              (r'''cuatrocientas''', 400),
                              (r'''cuatrocientos''', 400),
                              (r'''quinientas''', 500),
                              (r'''quinientos''', 500),
                              (r'''seiscientas''', 600),
                              (r'''seiscientos''', 600),
                              (r'''setecientas''', 700),
                              (r'''setecientos''', 700),
                              (r'''ochocientas''', 800),
                              (r'''ochocientos''', 800),
                              (r'''novecientas''', 900),
                              (r'''novecientos''', 900),
                              (r'''mil''', 1000),
                              (r'''millon''', 1000000),
                              (r'''millón''', 1000000),
                              (r'''millones''', 1000000),
                              (r'''billon''', 1000000000000),
                              (r'''billón''', 1000000000000),
                              (r'''billones''', 1000000000000),
                              (r'''trillon''', 1000000000000000000),
                              (r'''trillón''', 1000000000000000000),
                              (r'''trillones''', 1000000000000000000)])
    OrdinalNumberMap = dict([(r'''primero''', 1),
                             (r'''primera''', 1),
                             (r'''primer''', 1),
                             (r'''segundo''', 2),
                             (r'''segunda''', 2),
                             (r'''medio''', 2),
                             (r'''media''', 2),
                             (r'''tercero''', 3),
                             (r'''tercera''', 3),
                             (r'''tercer''', 3),
                             (r'''tercio''', 3),
                             (r'''cuarto''', 4),
                             (r'''cuarta''', 4),
                             (r'''quinto''', 5),
                             (r'''quinta''', 5),
                             (r'''sexto''', 6),
                             (r'''sexta''', 6),
                             (r'''septimo''', 7),
                             (r'''septima''', 7),
                             (r'''octavo''', 8),
                             (r'''octava''', 8),
                             (r'''noveno''', 9),
                             (r'''novena''', 9),
                             (r'''decimo''', 10),
                             (r'''decima''', 10),
                             (r'''undecimo''', 11),
                             (r'''undecima''', 11),
                             (r'''duodecimo''', 12),
                             (r'''duodecima''', 12),
                             (r'''decimotercero''', 13),
                             (r'''decimotercera''', 13),
                             (r'''decimocuarto''', 14),
                             (r'''decimocuarta''', 14),
                             (r'''decimoquinto''', 15),
                             (r'''decimoquinta''', 15),
                             (r'''decimosexto''', 16),
                             (r'''decimosexta''', 16),
                             (r'''decimoseptimo''', 17),
                             (r'''decimoseptima''', 17),
                             (r'''decimoctavo''', 18),
                             (r'''decimoctava''', 18),
                             (r'''decimonoveno''', 19),
                             (r'''decimonovena''', 19),
                             (r'''vigesimo''', 20),
                             (r'''vigesima''', 20),
                             (r'''trigesimo''', 30),
                             (r'''trigesima''', 30),
                             (r'''cuadragesimo''', 40),
                             (r'''cuadragesima''', 40),
                             (r'''quincuagesimo''', 50),
                             (r'''quincuagesima''', 50),
                             (r'''sexagesimo''', 60),
                             (r'''sexagesima''', 60),
                             (r'''septuagesimo''', 70),
                             (r'''septuagesima''', 70),
                             (r'''octogesimo''', 80),
                             (r'''octogesima''', 80),
                             (r'''nonagesimo''', 90),
                             (r'''nonagesima''', 90),
                             (r'''centesimo''', 100),
                             (r'''centesima''', 100),
                             (r'''ducentesimo''', 200),
                             (r'''ducentesima''', 200),
                             (r'''tricentesimo''', 300),
                             (r'''tricentesima''', 300),
                             (r'''cuadringentesimo''', 400),
                             (r'''cuadringentesima''', 400),
                             (r'''quingentesimo''', 500),
                             (r'''quingentesima''', 500),
                             (r'''sexcentesimo''', 600),
                             (r'''sexcentesima''', 600),
                             (r'''septingentesimo''', 700),
                             (r'''septingentesima''', 700),
                             (r'''octingentesimo''', 800),
                             (r'''octingentesima''', 800),
                             (r'''noningentesimo''', 900),
                             (r'''noningentesima''', 900),
                             (r'''milesimo''', 1000),
                             (r'''milesima''', 1000),
                             (r'''millonesimo''', 1000000),
                             (r'''millonesima''', 1000000),
                             (r'''billonesimo''', 1000000000000),
                             (r'''billonesima''', 1000000000000)])
    PrefixCardinalMap = dict([(r'''dos''', 2),
                              (r'''tres''', 3),
                              (r'''cuatro''', 4),
                              (r'''cinco''', 5),
                              (r'''seis''', 6),
                              (r'''siete''', 7),
                              (r'''ocho''', 8),
                              (r'''nueve''', 9),
                              (r'''diez''', 10),
                              (r'''once''', 11),
                              (r'''doce''', 12),
                              (r'''trece''', 13),
                              (r'''catorce''', 14),
                              (r'''quince''', 15),
                              (r'''dieciseis''', 16),
                              (r'''dieciséis''', 16),
                              (r'''diecisiete''', 17),
                              (r'''dieciocho''', 18),
                              (r'''diecinueve''', 19),
                              (r'''veinte''', 20),
                              (r'''ventiuna''', 21),
                              (r'''veintiun''', 21),
                              (r'''veintiún''', 21),
                              (r'''veintidos''', 22),
                              (r'''veintitres''', 23),
                              (r'''veinticuatro''', 24),
                              (r'''veinticinco''', 25),
                              (r'''veintiseis''', 26),
                              (r'''veintisiete''', 27),
                              (r'''veintiocho''', 28),
                              (r'''veintinueve''', 29),
                              (r'''treinta''', 30),
                              (r'''cuarenta''', 40),
                              (r'''cincuenta''', 50),
                              (r'''sesenta''', 60),
                              (r'''setenta''', 70),
                              (r'''ochenta''', 80),
                              (r'''noventa''', 90),
                              (r'''cien''', 100),
                              (r'''doscientos''', 200),
                              (r'''trescientos''', 300),
                              (r'''cuatrocientos''', 400),
                              (r'''quinientos''', 500),
                              (r'''seiscientos''', 600),
                              (r'''setecientos''', 700),
                              (r'''ochocientos''', 800),
                              (r'''novecientos''', 900)])
    SuffixOrdinalMap = dict([(r'''milesimo''', 1000),
                             (r'''millonesimo''', 1000000),
                             (r'''billonesimo''', 1000000000000)])
    RoundNumberMap = dict([(r'''mil''', 1000),
                           (r'''milesimo''', 1000),
                           (r'''millon''', 1000000),
                           (r'''millón''', 1000000),
                           (r'''millones''', 1000000),
                           (r'''millonesimo''', 1000000),
                           (r'''billon''', 1000000000000),
                           (r'''billón''', 1000000000000),
                           (r'''billones''', 1000000000000),
                           (r'''billonesimo''', 1000000000000),
                           (r'''trillon''', 1000000000000000000),
                           (r'''trillón''', 1000000000000000000),
                           (r'''trillones''', 1000000000000000000),
                           (r'''trillonesimo''', 1000000000000000000),
                           (r'''docena''', 12),
                           (r'''docenas''', 12),
                           (r'''k''', 1000),
                           (r'''m''', 1000000),
                           (r'''g''', 1000000000),
                           (r'''b''', 1000000000),
                           (r'''t''', 1000000000000)])
    AmbiguousFractionConnectorsRegex = f'^[.]'
# pylint: enable=line-too-long
