# ------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
# ------------------------------------------------------------------------------

from .base_numbers import BaseNumbers
# pylint: disable=line-too-long
class EnglishNumeric:
    LangMarker = 'Eng'
    RoundNumberIntegerRegex = f'(hundred|thousand|million|billion|trillion)'
    ZeroToNineIntegerRegex = f'(three|seven|eight|four|five|zero|nine|one|two|six)'
    NegativeNumberTermsRegex = f'((minus|negative)\\s+)'
    NegativeNumberSignRegex = f'^{NegativeNumberTermsRegex}.*'
    AnIntRegex = f'(an|a)(?=\\s)'
    TenToNineteenIntegerRegex = f'(seventeen|thirteen|fourteen|eighteen|nineteen|fifteen|sixteen|eleven|twelve|ten)'
    TensNumberIntegerRegex = f'(seventy|twenty|thirty|eighty|ninety|forty|fifty|sixty)'
    SeparaIntRegex = f'((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex})(\\s+{RoundNumberIntegerRegex})*))|(({AnIntRegex}(\\s+{RoundNumberIntegerRegex})+))'
    AllIntRegex = f'(((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\\s+{RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*{SeparaIntRegex})'
    PlaceHolderPureNumber = f'\\b'
    PlaceHolderDefault = f'\\D|\\b'
    NumbersWithPlaceHolder = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!([\\.,]\\d+[a-zA-Z]))(?={placeholder})'
    NumbersWithSuffix = f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    RoundNumberIntegerRegexWithLocks = f'(?<=\\b)\\d+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    NumbersWithDozenSuffix = f'(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dozen(s)?(?=\\b)'
    AllIntRegexWithLocks = f'((?<=\\b){AllIntRegex}(?=\\b))'
    AllIntRegexWithDozenSuffixLocks = f'(?<=\\b)(((half\\s+)?a\\s+dozen)|({AllIntRegex}\\s+dozen(s)?))(?=\\b)'
    RoundNumberOrdinalRegex = f'(hundredth|thousandth|millionth|billionth|trillionth)'
    BasicOrdinalRegex = f'(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|thirtieth|fortieth|fiftieth|sixtieth|seventieth|eightieth|ninetieth)'
    SuffixBasicOrdinalRegex = f'((((({TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}|{AnIntRegex})(\\s+{RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*({TensNumberIntegerRegex}(\\s+|\\s*-\\s*))?{BasicOrdinalRegex})'
    SuffixRoundNumberOrdinalRegex = f'(({AllIntRegex}\\s+){RoundNumberOrdinalRegex})'
    AllOrdinalRegex = f'({SuffixBasicOrdinalRegex}|{SuffixRoundNumberOrdinalRegex})'
    OrdinalSuffixRegex = f'(?<=\\b)((\\d*(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|0th))|(11th|12th))(?=\\b)'
    OrdinalNumericRegex = f'(?<=\\b)(\\d{{1,3}}(\\s*,\\s*\\d{{3}})*\\s*th)(?=\\b)'
    OrdinalRoundNumberRegex = f'(?<!(a|an)\\s+){RoundNumberOrdinalRegex}'
    OrdinalEnglishRegex = f'(?<=\\b){AllOrdinalRegex}(?=\\b)'
    FractionNotationWithSpacesRegex = f'(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNotationRegex = f'(((?<=\\W|^)-\\s*)|(?<![/-])(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))'
    FractionNounRegex = f'(?<=\\b)({AllIntRegex}\\s+(and\\s+)?)?({AllIntRegex})(\\s+|\\s*-\\s*)((({AllOrdinalRegex})|({RoundNumberOrdinalRegex}))s|halves|quarters)(?=\\b)'
    FractionNounWithArticleRegex = f'(?<=\\b)({AllIntRegex}\\s+(and\\s+)?)?(a|an|one)(\\s+|\\s*-\\s*)(?!\\bfirst\\b|\\bsecond\\b)(({AllOrdinalRegex})|({RoundNumberOrdinalRegex})|half|quarter)(?=\\b)'
    FractionPrepositionRegex = f'(?<=\\b)(?<numerator>({AllIntRegex})|((?<![\\.,])\\d+))\\s+(over|in|out\\s+of)\\s+(?<denominator>({AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)'
    FractionPrepositionWithinPercentModeRegex = f'(?<=\\b)(?<numerator>({AllIntRegex})|((?<![\\.,])\\d+))\\s+over\\s+(?<denominator>({AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)'
    AllPointRegex = f'((\\s+{ZeroToNineIntegerRegex})+|(\\s+{SeparaIntRegex}))'
    AllFloatRegex = f'{AllIntRegex}(\\s+point){AllPointRegex}'
    DoubleWithMultiplierRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)'
    DoubleExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)'
    DoubleCaretExponentialNotationRegex = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)'
    DoubleDecimalPointRegex = lambda placeholder: f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+(?!([\\.,]\\d+))(?={placeholder})'
    DoubleWithoutIntegralRegex = lambda placeholder: f'(?<=\\s|^)(?<!(\\d+))[\\.,]\\d+(?!([\\.,]\\d+))(?={placeholder})'
    DoubleWithRoundNumber = f'(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+\\s+{RoundNumberIntegerRegex}(?=\\b)'
    DoubleAllFloatRegex = f'((?<=\\b){AllFloatRegex}(?=\\b))'
    ConnectorRegex = f'(?<spacer>and)'
    NumberWithSuffixPercentage = f'(?<!%)({BaseNumbers.NumberReplaceToken})(\\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(per cents|per cent|cents|cent|percentage|percents|percent)\\b)'
    FractionNumberWithSuffixPercentage = f'(({BaseNumbers.FractionNumberReplaceToken})\\s+of)'
    NumberWithPrefixPercentage = f'(per cent of|percent of|percents of)(\\s*)({BaseNumbers.NumberReplaceToken})'
    NumberWithPrepositionPercentage = f'({BaseNumbers.NumberReplaceToken})\\s*(in|out\\s+of)\\s*({BaseNumbers.NumberReplaceToken})'
    TillRegex = f'(to|through|--|-|—|——|~|–)'
    MoreRegex = f'((bigger|greater|more|higher|larger)(\\s+than)?|above|over|(?<!<|=)>)'
    LessRegex = f'((less|lower|smaller|fewer)(\\s+than)?|below|under|(?<!>|=)<)'
    EqualRegex = f'(equal(s|ing)?(\\s+(to|than))?|(?<!<|>)=)'
    MoreOrEqualPrefix = f'((no\\s+{LessRegex})|(at\\s+least))'
    MoreOrEqual = f'(({MoreRegex}\\s+(or)?\\s+{EqualRegex})|({EqualRegex}\\s+(or)?\\s+{MoreRegex})|{MoreOrEqualPrefix}(\\s+(or)?\\s+{EqualRegex})?|({EqualRegex}\\s+(or)?\\s+)?{MoreOrEqualPrefix}|>\\s*=)'
    MoreOrEqualSuffix = f'((and|or)\\s+(more|greater|higher|larger|bigger)((?!\\s+than)|(\\s+than(?!(\\s*\\d+)))))'
    LessOrEqualPrefix = f'((no\\s+{MoreRegex})|(at\\s+most))'
    LessOrEqual = f'(({LessRegex}\\s+(or)?\\s+{EqualRegex})|({EqualRegex}\\s+(or)?\\s+{LessRegex})|{LessOrEqualPrefix}(\\s+(or)?\\s+{EqualRegex})?|({EqualRegex}\\s+(or)?\\s+)?{LessOrEqualPrefix}|<\\s*=)'
    LessOrEqualSuffix = f'((and|or)\\s+(less|lower|smaller|fewer)((?!\\s+than)|(\\s+than(?!(\\s*\\d+)))))'
    NumberSplitMark = f'(?![,.](?!\\d+))'
    MoreRegexNoNumberSucceed = f'((bigger|greater|more|higher|larger)((?!\\s+than)|\\s+(than(?!(\\s*\\d+))))|(above|over)(?!(\\s*\\d+)))'
    LessRegexNoNumberSucceed = f'((less|lower|smaller|fewer)((?!\\s+than)|\\s+(than(?!(\\s*\\d+))))|(below|under)(?!(\\s*\\d+)))'
    EqualRegexNoNumberSucceed = f'(equal(s|ing)?((?!\\s+(to|than))|(\\s+(to|than)(?!(\\s*\\d+)))))'
    OneNumberRangeMoreRegex1 = f'({MoreOrEqual}|{MoreRegex})\\s*(the\\s+)?(?<number1>({NumberSplitMark}.)+)'
    OneNumberRangeMoreRegex2 = f'(?<number1>({NumberSplitMark}.)+)\\s*{MoreOrEqualSuffix}'
    OneNumberRangeMoreSeparateRegex = f'({EqualRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){MoreRegexNoNumberSucceed})|({MoreRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){EqualRegexNoNumberSucceed})'
    OneNumberRangeLessRegex1 = f'({LessOrEqual}|{LessRegex})\\s*(the\\s+)?(?<number2>({NumberSplitMark}.)+)'
    OneNumberRangeLessRegex2 = f'(?<number2>({NumberSplitMark}.)+)\\s*{LessOrEqualSuffix}'
    OneNumberRangeLessSeparateRegex = f'({EqualRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){LessRegexNoNumberSucceed})|({LessRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){EqualRegexNoNumberSucceed})'
    OneNumberRangeEqualRegex = f'{EqualRegex}\\s*(the\\s+)?(?<number1>({NumberSplitMark}.)+)'
    TwoNumberRangeRegex1 = f'between\\s*(the\\s+)?(?<number1>({NumberSplitMark}.)+)\\s*and\\s*(the\\s+)?(?<number2>({NumberSplitMark}.)+)'
    TwoNumberRangeRegex2 = f'({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})\\s*(and|but|,)\\s*({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})'
    TwoNumberRangeRegex3 = f'({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})\\s*(and|but|,)\\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})'
    TwoNumberRangeRegex4 = f'(from\\s+)?(?<number1>({NumberSplitMark}(?!\\bfrom\\b).)+)\\s*{TillRegex}\\s*(the\\s+)?(?<number2>({NumberSplitMark}.)+)'
    AmbiguousFractionConnectorsRegex = f'(\\bin\\b)'
    DecimalSeparatorChar = '.'
    FractionMarkerToken = 'over'
    NonDecimalSeparatorChar = ','
    HalfADozenText = 'six'
    WordSeparatorToken = 'and'
    WrittenDecimalSeparatorTexts = [r'point']
    WrittenGroupSeparatorTexts = [r'punto']
    WrittenIntegerSeparatorTexts = [r'and']
    WrittenFractionSeparatorTexts = [r'and']
    HalfADozenRegex = f'half\\s+a\\s+dozen'
    DigitalNumberRegex = f'((?<=\\b)(hundred|thousand|million|billion|trillion|dozen(s)?)(?=\\b))|((?<=(\\d|\\b)){BaseNumbers.MultiplierLookupRegex}(?=\\b))'
    CardinalNumberMap = dict([(r'''a''', 1),
                              (r'''zero''', 0),
                              (r'''an''', 1),
                              (r'''one''', 1),
                              (r'''two''', 2),
                              (r'''three''', 3),
                              (r'''four''', 4),
                              (r'''five''', 5),
                              (r'''six''', 6),
                              (r'''seven''', 7),
                              (r'''eight''', 8),
                              (r'''nine''', 9),
                              (r'''ten''', 10),
                              (r'''eleven''', 11),
                              (r'''twelve''', 12),
                              (r'''dozen''', 12),
                              (r'''dozens''', 12),
                              (r'''thirteen''', 13),
                              (r'''fourteen''', 14),
                              (r'''fifteen''', 15),
                              (r'''sixteen''', 16),
                              (r'''seventeen''', 17),
                              (r'''eighteen''', 18),
                              (r'''nineteen''', 19),
                              (r'''twenty''', 20),
                              (r'''thirty''', 30),
                              (r'''forty''', 40),
                              (r'''fifty''', 50),
                              (r'''sixty''', 60),
                              (r'''seventy''', 70),
                              (r'''eighty''', 80),
                              (r'''ninety''', 90),
                              (r'''hundred''', 100),
                              (r'''thousand''', 1000),
                              (r'''million''', 1000000),
                              (r'''billion''', 1000000000),
                              (r'''trillion''', 1000000000000)])
    OrdinalNumberMap = dict([(r'''first''', 1),
                             (r'''second''', 2),
                             (r'''secondary''', 2),
                             (r'''half''', 2),
                             (r'''third''', 3),
                             (r'''fourth''', 4),
                             (r'''quarter''', 4),
                             (r'''fifth''', 5),
                             (r'''sixth''', 6),
                             (r'''seventh''', 7),
                             (r'''eighth''', 8),
                             (r'''ninth''', 9),
                             (r'''tenth''', 10),
                             (r'''eleventh''', 11),
                             (r'''twelfth''', 12),
                             (r'''thirteenth''', 13),
                             (r'''fourteenth''', 14),
                             (r'''fifteenth''', 15),
                             (r'''sixteenth''', 16),
                             (r'''seventeenth''', 17),
                             (r'''eighteenth''', 18),
                             (r'''nineteenth''', 19),
                             (r'''twentieth''', 20),
                             (r'''thirtieth''', 30),
                             (r'''fortieth''', 40),
                             (r'''fiftieth''', 50),
                             (r'''sixtieth''', 60),
                             (r'''seventieth''', 70),
                             (r'''eightieth''', 80),
                             (r'''ninetieth''', 90),
                             (r'''hundredth''', 100),
                             (r'''thousandth''', 1000),
                             (r'''millionth''', 1000000),
                             (r'''billionth''', 1000000000),
                             (r'''trillionth''', 1000000000000),
                             (r'''firsts''', 1),
                             (r'''halves''', 2),
                             (r'''thirds''', 3),
                             (r'''fourths''', 4),
                             (r'''quarters''', 4),
                             (r'''fifths''', 5),
                             (r'''sixths''', 6),
                             (r'''sevenths''', 7),
                             (r'''eighths''', 8),
                             (r'''ninths''', 9),
                             (r'''tenths''', 10),
                             (r'''elevenths''', 11),
                             (r'''twelfths''', 12),
                             (r'''thirteenths''', 13),
                             (r'''fourteenths''', 14),
                             (r'''fifteenths''', 15),
                             (r'''sixteenths''', 16),
                             (r'''seventeenths''', 17),
                             (r'''eighteenths''', 18),
                             (r'''nineteenths''', 19),
                             (r'''twentieths''', 20),
                             (r'''thirtieths''', 30),
                             (r'''fortieths''', 40),
                             (r'''fiftieths''', 50),
                             (r'''sixtieths''', 60),
                             (r'''seventieths''', 70),
                             (r'''eightieths''', 80),
                             (r'''ninetieths''', 90),
                             (r'''hundredths''', 100),
                             (r'''thousandths''', 1000),
                             (r'''millionths''', 1000000),
                             (r'''billionths''', 1000000000),
                             (r'''trillionths''', 1000000000000)])
    RoundNumberMap = dict([(r'''hundred''', 100),
                           (r'''thousand''', 1000),
                           (r'''million''', 1000000),
                           (r'''billion''', 1000000000),
                           (r'''trillion''', 1000000000000),
                           (r'''hundredth''', 100),
                           (r'''thousandth''', 1000),
                           (r'''millionth''', 1000000),
                           (r'''billionth''', 1000000000),
                           (r'''trillionth''', 1000000000000),
                           (r'''hundredths''', 100),
                           (r'''thousandths''', 1000),
                           (r'''millionths''', 1000000),
                           (r'''billionths''', 1000000000),
                           (r'''trillionths''', 1000000000000),
                           (r'''dozen''', 12),
                           (r'''dozens''', 12),
                           (r'''k''', 1000),
                           (r'''m''', 1000000),
                           (r'''g''', 1000000000),
                           (r'''b''', 1000000000),
                           (r'''t''', 1000000000000)])
    AmbiguityFiltersDict = dict([(r'''\bone\b''', r'''\b(the|this|that|which)\s+(one)\b''')])
# pylint: enable=line-too-long
